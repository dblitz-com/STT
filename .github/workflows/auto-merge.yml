name: Auto-Merge PR

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [dev, main]
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}
  schedule:
    - cron: '*/10 * * * *'  # Every 10 minutes as fallback
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to check for auto-merge'
        required: false

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    # Run for: approved reviews, successful checks, pull request events, scheduled runs, or manual dispatch
    if: |
      github.event.review.state == 'approved' || 
      github.event.check_suite.conclusion == 'success' || 
      github.event.state == 'success' || 
      github.event_name == 'pull_request' ||
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get PR info
        id: pr-info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Auto-merge triggered by: ${{ github.event_name }}"
          
          # Get the PR number from the event
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "üìù Pull request event - PR #$PR_NUMBER"
          elif [ "${{ github.event_name }}" == "pull_request_review" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
            echo "üìù Pull request review event - PR #$PR_NUMBER"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.pr_number }}" ]; then
            PR_NUMBER="${{ github.event.inputs.pr_number }}"
            echo "üìù Manual dispatch with PR #$PR_NUMBER"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # Find most recent open PR for this branch
            PR_NUMBER=$(gh pr list --head "${{ github.ref_name }}" --json number --jq '.[0].number // empty')
            echo "üìù Manual dispatch - found PR #$PR_NUMBER"
          elif [ "${{ github.event_name }}" == "schedule" ]; then
            # For scheduled runs, find PRs ready for auto-merge
            echo "üìù Scheduled run - checking all open PRs"
            # We'll handle multiple PRs in scheduled mode later in the logic
            PR_NUMBER="SCHEDULED_CHECK"
          else
            # For check_suite and status events, we need to find the PR
            PR_NUMBER=$(gh pr list --search "sha:${{ github.sha }}" --json number --jq '.[0].number // empty')
            echo "üìù Check/status event - found PR #$PR_NUMBER"
          fi
          
          # Handle scheduled checks differently
          if [ "$PR_NUMBER" == "SCHEDULED_CHECK" ]; then
            echo "üïê Scheduled check mode - finding eligible PRs for auto-merge"
            
            # Find open PRs targeting dev branch that might be ready for auto-merge
            ELIGIBLE_PRS=$(gh pr list --base dev --state open --json number,statusCheckRollup --jq '.[] | select(.statusCheckRollup | length > 0 and all(.status == "COMPLETED" and .conclusion == "SUCCESS")) | .number')
            
            if [ -z "$ELIGIBLE_PRS" ]; then
              echo "üì≠ No PRs found ready for auto-merge in scheduled check"
              exit 0
            fi
            
            # For scheduled mode, pick the first eligible PR
            PR_NUMBER=$(echo "$ELIGIBLE_PRS" | head -n1)
            echo "üìã Scheduled check found eligible PR #$PR_NUMBER"
          fi
          
          if [ -z "$PR_NUMBER" ] || [ "$PR_NUMBER" == "null" ]; then
            echo "‚ùå No PR found for this event"
            exit 0
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          # Get PR details with error handling
          echo "üìä Fetching PR #$PR_NUMBER details..."
          
          # First check if PR exists
          if ! gh pr view $PR_NUMBER --json number &>/dev/null; then
            echo "‚ùå PR #$PR_NUMBER does not exist or is not accessible"
            echo "üîç Available PRs:"
            gh pr list --limit 5 --json number,title || echo "  Could not list PRs"
            exit 1
          fi
          
          # Get detailed PR info with better error reporting
          if ! PR_INFO=$(gh pr view $PR_NUMBER --json baseRefName,headRefName,state,mergeable,reviewDecision,statusCheckRollup 2>&1); then
            echo "‚ùå Failed to fetch PR details for #$PR_NUMBER"
            echo "Error output: $PR_INFO"
            exit 1
          fi
          
          # Parse PR info with error handling
          BASE_BRANCH=$(echo "$PR_INFO" | jq -r '.baseRefName // "unknown"' 2>/dev/null)
          HEAD_BRANCH=$(echo "$PR_INFO" | jq -r '.headRefName // "unknown"' 2>/dev/null)
          STATE=$(echo "$PR_INFO" | jq -r '.state // "unknown"' 2>/dev/null)
          MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable // "unknown"' 2>/dev/null)
          REVIEW_DECISION=$(echo "$PR_INFO" | jq -r '.reviewDecision // ""' 2>/dev/null)
          
          # Validate essential fields
          if [ "$BASE_BRANCH" == "unknown" ] || [ "$STATE" == "unknown" ]; then
            echo "‚ùå Failed to parse essential PR information"
            exit 1
          fi

      - name: Check for submodule-only changes
        id: submodule-check
        run: |
          echo "üîç Checking if PR #${{ steps.pr-info.outputs.pr_number }} contains only submodule changes..."
          
          # Get list of changed files
          CHANGED_FILES=$(gh pr diff ${{ steps.pr-info.outputs.pr_number }} --name-only)
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "üì≠ No changed files found"
            echo "submodule_only=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üìã Changed files:"
          echo "$CHANGED_FILES"
          
          # Check if all changes are in src/gengines/ (submodules)
          NON_SUBMODULE_CHANGES=$(echo "$CHANGED_FILES" | grep -v '^src/gengines/' || true)
          
          if [ -z "$NON_SUBMODULE_CHANGES" ]; then
            echo "üéØ PR contains ONLY submodule changes - skipping auto-merge"
            echo "üí° Submodule changes are handled by submodule-testing.yml workflow"
            echo "submodule_only=true" >> $GITHUB_OUTPUT
          else
            echo "‚úÖ PR contains non-submodule changes - proceeding with auto-merge"
            echo "submodule_only=false" >> $GITHUB_OUTPUT
          fi
          
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "head_branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT
          echo "state=$STATE" >> $GITHUB_OUTPUT
          echo "mergeable=$MERGEABLE" >> $GITHUB_OUTPUT
          echo "review_decision=$REVIEW_DECISION" >> $GITHUB_OUTPUT
          
          # Check status checks with error handling
          echo "üîç Analyzing status checks..."
          if STATUS_CHECKS=$(echo "$PR_INFO" | jq -r '.statusCheckRollup[]? | select(.status == "COMPLETED" and .conclusion == "SUCCESS") | .name' 2>/dev/null | wc -l 2>/dev/null); then
            echo "üìä Found $STATUS_CHECKS successful status checks"
          else
            echo "‚ö†Ô∏è  Unable to parse status checks, defaulting to 0"
            STATUS_CHECKS=0
          fi
          
          # For dev branch: require secret detection + auto-pr, for main: require comprehensive checks
          if [ "$BASE_BRANCH" == "dev" ]; then
            REQUIRED_CHECKS=2  # secret-detection + auto-pr check
          else
            REQUIRED_CHECKS=3  # More stringent for main (secret-detection + comprehensive-testing + auto-pr)
          fi
          
          echo "üìã Required checks: $REQUIRED_CHECKS, Passed: $STATUS_CHECKS"
          
          echo "status_checks_passed=$STATUS_CHECKS" >> $GITHUB_OUTPUT
          echo "required_checks=$REQUIRED_CHECKS" >> $GITHUB_OUTPUT
          
          echo "PR #$PR_NUMBER: $HEAD_BRANCH -> $BASE_BRANCH"
          echo "State: $STATE, Mergeable: $MERGEABLE, Review: $REVIEW_DECISION"
          echo "Status checks passed: $STATUS_CHECKS/$REQUIRED_CHECKS"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Quick secret check
        id: secret-check
        run: |
          echo "üîç Quick secret check..."
          
          # Check if the Quick Secret Scan status check actually passed
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          
          if [ -n "$PR_NUMBER" ]; then
            # Get status checks for this PR
            SECRET_CHECK_STATUS=$(gh pr view $PR_NUMBER --json statusCheckRollup --jq '.statusCheckRollup[] | select(.name == "Quick Secret Scan") | .conclusion' 2>/dev/null || echo "")
            
            if [ "$SECRET_CHECK_STATUS" = "SUCCESS" ]; then
              echo "secret_scan_passed=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Secret detection passed"
            elif [ "$SECRET_CHECK_STATUS" = "FAILURE" ]; then
              echo "secret_scan_passed=false" >> $GITHUB_OUTPUT
              echo "secret_scan_reason=Secret detection failed - potential secrets found" >> $GITHUB_OUTPUT
              echo "‚ùå Secret detection failed"
            elif [ -z "$SECRET_CHECK_STATUS" ]; then
              # Fallback: if no secret check found, rely on branch protection
              echo "secret_scan_passed=true" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è No secret check found - relying on branch protection"
            else
              echo "secret_scan_passed=false" >> $GITHUB_OUTPUT
              echo "secret_scan_reason=Secret detection status: $SECRET_CHECK_STATUS" >> $GITHUB_OUTPUT
              echo "‚è≥ Secret detection not yet complete: $SECRET_CHECK_STATUS"
            fi
          else
            echo "secret_scan_passed=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No PR found - skipping secret check"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check merge conditions
        id: merge-check
        run: |
          # Skip auto-merge for submodule-only changes
          if [ "${{ steps.submodule-check.outputs.submodule_only }}" == "true" ]; then
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Submodule-only changes handled by submodule-testing.yml" >> $GITHUB_OUTPUT
            echo "üéØ Skipping auto-merge for submodule-only PR"
            exit 0
          fi
          
          # Auto-merge PRs targeting dev branch (feature PRs)
          # Manual approval required for main branch (promotion PRs)
          if [ "${{ steps.pr-info.outputs.base_branch }}" == "dev" ]; then
            echo "merge_type=feature" >> $GITHUB_OUTPUT
          elif [ "${{ steps.pr-info.outputs.base_branch }}" == "main" ]; then
            echo "merge_type=promotion" >> $GITHUB_OUTPUT
          else
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Only auto-merge to dev or main branch" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if PR is open and mergeable
          if [ "${{ steps.pr-info.outputs.state }}" != "OPEN" ]; then
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=PR is not open" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [ "${{ steps.pr-info.outputs.mergeable }}" != "MERGEABLE" ]; then
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=PR is not mergeable" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if approved (only required for main branch)
          BASE_BRANCH="${{ steps.pr-info.outputs.base_branch }}"
          if [ "$BASE_BRANCH" == "main" ] && [ "${{ steps.pr-info.outputs.review_decision }}" != "APPROVED" ]; then
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Main branch PR requires approval" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Different requirements for feature vs promotion PRs
          BASE_BRANCH="${{ steps.pr-info.outputs.base_branch }}"
          
          if [ "$BASE_BRANCH" == "dev" ]; then
            # Feature PRs: Auto-merge after secret detection + status checks
            
            # CRITICAL: Verify secret detection passed
            if [ "${{ steps.secret-check.outputs.secret_scan_passed }}" != "true" ]; then
              echo "can_merge=false" >> $GITHUB_OUTPUT
              echo "reason=üîí Secret detection required: ${{ steps.secret-check.outputs.secret_scan_reason || 'Secret scanning must pass before merge' }}" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            if [ "${{ steps.pr-info.outputs.status_checks_passed }}" -lt "${{ steps.pr-info.outputs.required_checks }}" ]; then
              echo "can_merge=false" >> $GITHUB_OUTPUT
              echo "reason=Not all required status checks passed" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "can_merge=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All conditions met for feature PR auto-merge (including secret detection)"
            
          elif [ "$BASE_BRANCH" == "main" ]; then
            # Promotion PRs: Require manual approval + secret detection, no auto-merge
            
            # CRITICAL: Still verify secret detection for main branch
            if [ "${{ steps.secret-check.outputs.secret_scan_passed }}" != "true" ]; then
              echo "can_merge=false" >> $GITHUB_OUTPUT
              echo "reason=üîí Secret detection failed for main branch: ${{ steps.secret-check.outputs.secret_scan_reason || 'Secret scanning must pass' }}" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Promotion PRs require manual merge for production safety (secret detection passed)" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Auto-merge PR
        if: steps.merge-check.outputs.can_merge == 'true'
        run: |
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          BASE_BRANCH="${{ steps.pr-info.outputs.base_branch }}"
          
          echo "üöÄ Attempting to auto-merge PR #$PR_NUMBER to $BASE_BRANCH"
          
          # Use GitHub's native auto-merge feature for reliability
          if gh pr merge $PR_NUMBER --squash --auto --delete-branch; then
            echo "‚úÖ Successfully enabled auto-merge for PR #$PR_NUMBER"
            echo "üîÑ PR will merge automatically once all status checks pass"
          else
            echo "‚ùå Failed to enable auto-merge for PR #$PR_NUMBER"
            echo "üîç Checking if PR can be merged immediately..."
            
            # Fallback: try immediate merge if conditions are already met
            if gh pr merge $PR_NUMBER --squash --delete-branch; then
              echo "‚úÖ Successfully merged PR #$PR_NUMBER immediately"
            else
              echo "‚ùå Failed to merge PR #$PR_NUMBER - may need manual intervention"
              exit 1
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on merge conditions not met
        if: steps.merge-check.outputs.can_merge == 'false' && steps.pr-info.outputs.pr_number != ''
        run: |
          gh pr comment ${{ steps.pr-info.outputs.pr_number }} --body "ü§ñ **Auto-Merge Status**: ${{ steps.merge-check.outputs.reason }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger staging deployment
        if: steps.merge-check.outputs.can_merge == 'true' && steps.pr-info.outputs.base_branch == 'dev'
        run: |
          echo "üöÄ Merged to dev branch - Flux will automatically deploy to staging environment"
          echo "Staging deployment will be triggered by Flux watching the dev branch"

      - name: Trigger production deployment
        if: steps.merge-check.outputs.can_merge == 'true' && steps.pr-info.outputs.base_branch == 'main'
        run: |
          echo "üöÄ Merged to main branch - Flux will automatically deploy to production environment"
          echo "Production deployment will be triggered by Flux watching the main branch"