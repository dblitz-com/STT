name: Auto-Merge PR

on:
  pull_request_review:
    types: [submitted]
  check_suite:
    types: [completed]
  status: {}

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: read

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: github.event.review.state == 'approved' || github.event.check_suite.conclusion == 'success' || github.event.state == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get PR info
        id: pr-info
        run: |
          # Get the PR number from the event
          if [ "${{ github.event_name }}" == "pull_request_review" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            # For check_suite and status events, we need to find the PR
            PR_NUMBER=$(gh pr list --search "sha:${{ github.sha }}" --json number --jq '.[0].number // empty')
          fi
          
          if [ -z "$PR_NUMBER" ]; then
            echo "No PR found for this event"
            exit 0
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          # Get PR details
          PR_INFO=$(gh pr view $PR_NUMBER --json baseRefName,headRefName,state,mergeable,reviewDecision,statusCheckRollup)
          
          BASE_BRANCH=$(echo "$PR_INFO" | jq -r '.baseRefName')
          HEAD_BRANCH=$(echo "$PR_INFO" | jq -r '.headRefName')
          STATE=$(echo "$PR_INFO" | jq -r '.state')
          MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
          REVIEW_DECISION=$(echo "$PR_INFO" | jq -r '.reviewDecision')
          
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_OUTPUT
          echo "head_branch=$HEAD_BRANCH" >> $GITHUB_OUTPUT
          echo "state=$STATE" >> $GITHUB_OUTPUT
          echo "mergeable=$MERGEABLE" >> $GITHUB_OUTPUT
          echo "review_decision=$REVIEW_DECISION" >> $GITHUB_OUTPUT
          
          # Check status checks
          STATUS_CHECKS=$(echo "$PR_INFO" | jq -r '.statusCheckRollup[]? | select(.status == "COMPLETED" and .conclusion == "SUCCESS") | .name' | wc -l)
          # For dev branch: require basic checks, for main: require comprehensive checks
          if [ "$BASE_BRANCH" == "dev" ]; then
            REQUIRED_CHECKS=1  # At least auto-pr check
          else
            REQUIRED_CHECKS=2  # More stringent for main
          fi
          
          echo "status_checks_passed=$STATUS_CHECKS" >> $GITHUB_OUTPUT
          echo "required_checks=$REQUIRED_CHECKS" >> $GITHUB_OUTPUT
          
          echo "PR #$PR_NUMBER: $HEAD_BRANCH -> $BASE_BRANCH"
          echo "State: $STATE, Mergeable: $MERGEABLE, Review: $REVIEW_DECISION"
          echo "Status checks passed: $STATUS_CHECKS/$REQUIRED_CHECKS"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check merge conditions
        id: merge-check
        run: |
          # Auto-merge PRs targeting dev branch (feature PRs)
          # Manual approval required for main branch (promotion PRs)
          if [ "${{ steps.pr-info.outputs.base_branch }}" == "dev" ]; then
            echo "merge_type=feature" >> $GITHUB_OUTPUT
          elif [ "${{ steps.pr-info.outputs.base_branch }}" == "main" ]; then
            echo "merge_type=promotion" >> $GITHUB_OUTPUT
          else
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Only auto-merge to dev or main branch" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if PR is open and mergeable
          if [ "${{ steps.pr-info.outputs.state }}" != "OPEN" ]; then
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=PR is not open" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [ "${{ steps.pr-info.outputs.mergeable }}" != "MERGEABLE" ]; then
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=PR is not mergeable" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if approved (only required for main branch)
          BASE_BRANCH="${{ steps.pr-info.outputs.base_branch }}"
          if [ "$BASE_BRANCH" == "main" ] && [ "${{ steps.pr-info.outputs.review_decision }}" != "APPROVED" ]; then
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Main branch PR requires approval" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Different requirements for feature vs promotion PRs
          BASE_BRANCH="${{ steps.pr-info.outputs.base_branch }}"
          
          if [ "$BASE_BRANCH" == "dev" ]; then
            # Feature PRs: Auto-merge after approval + status checks
            if [ "${{ steps.pr-info.outputs.status_checks_passed }}" -lt "${{ steps.pr-info.outputs.required_checks }}" ]; then
              echo "can_merge=false" >> $GITHUB_OUTPUT
              echo "reason=Not all required status checks passed" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            echo "can_merge=true" >> $GITHUB_OUTPUT
            echo "All conditions met for feature PR auto-merge"
            
          elif [ "$BASE_BRANCH" == "main" ]; then
            # Promotion PRs: Require manual approval, no auto-merge
            echo "can_merge=false" >> $GITHUB_OUTPUT
            echo "reason=Promotion PRs require manual merge for production safety" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Auto-merge PR
        if: steps.merge-check.outputs.can_merge == 'true'
        run: |
          gh pr merge ${{ steps.pr-info.outputs.pr_number }} --squash --auto --delete-branch
          echo "âœ… Auto-merged PR #${{ steps.pr-info.outputs.pr_number }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on merge conditions not met
        if: steps.merge-check.outputs.can_merge == 'false' && steps.pr-info.outputs.pr_number != ''
        run: |
          gh pr comment ${{ steps.pr-info.outputs.pr_number }} --body "ðŸ¤– **Auto-Merge Status**: ${{ steps.merge-check.outputs.reason }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger staging deployment
        if: steps.merge-check.outputs.can_merge == 'true' && steps.pr-info.outputs.base_branch == 'dev'
        run: |
          echo "ðŸš€ Merged to dev branch - Flux will automatically deploy to staging environment"
          echo "Staging deployment will be triggered by Flux watching the dev branch"

      - name: Trigger production deployment
        if: steps.merge-check.outputs.can_merge == 'true' && steps.pr-info.outputs.base_branch == 'main'
        run: |
          echo "ðŸš€ Merged to main branch - Flux will automatically deploy to production environment"
          echo "Production deployment will be triggered by Flux watching the main branch"