name: Automated Flux Updates

on:
  workflow_dispatch:
  schedule:
    - cron: "0 2 * * 1" # Weekly on Monday at 2 AM UTC

permissions:
  contents: write
  pull-requests: write

jobs:
  update-flux:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main
        with:
          version: 'latest'
          
      - name: Update Flux components
        id: update
        run: |
          # Update staging environment
          flux install --export > ./infrastructure/clusters/staging/flux-system/gotk-components.yaml
          
          # Update production environment
          flux install --export > ./infrastructure/clusters/production/flux-system/gotk-components.yaml
          
          # Get version info
          VERSION="$(flux -v)"
          echo "flux_version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if there are any changes
          if [[ $(git diff --name-only) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate updated manifests
        if: steps.update.outputs.changes == 'true'
        run: |
          # Validate the updated manifests using yq
          yq eval . ./infrastructure/clusters/staging/flux-system/gotk-components.yaml > /dev/null
          yq eval . ./infrastructure/clusters/production/flux-system/gotk-components.yaml > /dev/null
          echo "âœ… Updated manifests are valid YAML"
          
      - name: Create Pull Request
        if: steps.update.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: update-flux-${{ github.run_number }}
          commit-message: "chore: update to ${{ steps.update.outputs.flux_version }}"
          title: "ðŸ”„ Update to ${{ steps.update.outputs.flux_version }}"
          body: |
            ## Flux Update
            
            **Version:** ${{ steps.update.outputs.flux_version }}
            
            ### Changes
            - Updated Flux components in staging environment
            - Updated Flux components in production environment
            
            ### Validation
            - âœ… Manifest validation passed
            - âœ… Both environments updated consistently
            
            ### Next Steps
            1. Review the changes
            2. Merge to trigger deployment to staging (dev branch)
            3. Promote to production (main branch) after validation
            
            ---
            *This PR was automatically created by the Flux update workflow*
          labels: |
            flux
            automated
            dependencies
            infrastructure
          draft: false
          
      - name: Comment on no changes
        if: steps.update.outputs.changes == 'false'
        run: |
          echo "âœ… Flux is already up to date (${{ steps.update.outputs.flux_version }})"