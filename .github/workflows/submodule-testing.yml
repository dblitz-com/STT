name: Dynamic Submodule Testing Pipeline

on:
  pull_request:
    paths:
      - 'src/gengines/**'
  push:
    paths:
      - 'src/gengines/**'
    branches: [ main, dev ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  pull-requests: read

jobs:
  detect-submodules:
    name: Detect Changed Submodules
    runs-on: ubuntu-latest
    outputs:
      submodules: ${{ steps.detect.outputs.submodules }}
      has-submodules: ${{ steps.detect.outputs.has-submodules }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Detect submodules and tech stack
        id: detect
        run: |
          echo "üîç Detecting submodules and their tech stacks..."
          
          # Find all submodules in src/gengines/
          submodules_json="[]"
          has_submodules="false"
          
          if [ -d "src/gengines" ]; then
            for submodule_path in src/gengines/*/; do
              if [ -d "$submodule_path" ]; then
                submodule_name=$(basename "$submodule_path")
                echo "üìÅ Found submodule: $submodule_name"
                
                # Detect tech stack
                tech_stack="unknown"
                test_command="echo 'No tests configured'"
                dockerfile_path=""
                
                # Python detection
                if [ -f "$submodule_path/pyproject.toml" ] || [ -f "$submodule_path/requirements.txt" ] || [ -f "$submodule_path/setup.py" ]; then
                  tech_stack="python"
                  if [ -f "$submodule_path/pyproject.toml" ]; then
                    test_command="python -m pytest"
                  else
                    test_command="python -m unittest discover"
                  fi
                fi
                
                # Node.js detection
                if [ -f "$submodule_path/package.json" ]; then
                  tech_stack="nodejs"
                  if grep -q '"test"' "$submodule_path/package.json"; then
                    test_command="npm test"
                  else
                    test_command="echo 'No npm test script found'"
                  fi
                fi
                
                # Go detection
                if [ -f "$submodule_path/go.mod" ]; then
                  tech_stack="go"
                  test_command="go test ./..."
                fi
                
                # Rust detection
                if [ -f "$submodule_path/Cargo.toml" ]; then
                  tech_stack="rust"
                  test_command="cargo test"
                fi
                
                # Dockerfile detection
                if [ -f "$submodule_path/Dockerfile" ]; then
                  dockerfile_path="$submodule_path/Dockerfile"
                fi
                
                # Add to JSON array
                submodule_info=$(jq -n \
                  --arg name "$submodule_name" \
                  --arg path "$submodule_path" \
                  --arg tech "$tech_stack" \
                  --arg test "$test_command" \
                  --arg dockerfile "$dockerfile_path" \
                  '{
                    name: $name,
                    path: $path,
                    tech_stack: $tech,
                    test_command: $test,
                    dockerfile: $dockerfile
                  }')
                
                submodules_json=$(echo "$submodules_json" | jq ". + [$submodule_info]")
                has_submodules="true"
                
                echo "  üìä Tech stack: $tech_stack"
                echo "  üß™ Test command: $test_command"
                echo "  üê≥ Dockerfile: ${dockerfile_path:-"None"}"
              fi
            done
          fi
          
          echo "submodules=$submodules_json" >> $GITHUB_OUTPUT
          echo "has-submodules=$has_submodules" >> $GITHUB_OUTPUT
          
          echo "üéØ Detected submodules:"
          echo "$submodules_json" | jq '.'

  test-submodules:
    name: Test Submodule
    runs-on: ubuntu-latest
    needs: detect-submodules
    if: needs.detect-submodules.outputs.has-submodules == 'true'
    strategy:
      matrix:
        submodule: ${{ fromJson(needs.detect-submodules.outputs.submodules) }}
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup environment for ${{ matrix.submodule.tech_stack }}
        run: |
          echo "üöÄ Setting up ${{ matrix.submodule.tech_stack }} environment for ${{ matrix.submodule.name }}"
          
          case "${{ matrix.submodule.tech_stack }}" in
            "python")
              echo "üêç Setting up Python environment"
              ;;
            "nodejs")
              echo "üì¶ Setting up Node.js environment"
              ;;
            "go")
              echo "üêπ Setting up Go environment"
              ;;
            "rust")
              echo "ü¶Ä Setting up Rust environment"
              ;;
            *)
              echo "‚ùì Unknown tech stack: ${{ matrix.submodule.tech_stack }}"
              ;;
          esac

      - name: Setup Python (if needed)
        if: matrix.submodule.tech_stack == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '${{ matrix.submodule.path }}/pyproject.toml'

      - name: Setup Node.js (if needed)
        if: matrix.submodule.tech_stack == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Go (if needed)
        if: matrix.submodule.tech_stack == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Rust (if needed)
        if: matrix.submodule.tech_stack == 'rust'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install dependencies
        working-directory: ${{ matrix.submodule.path }}
        run: |
          echo "üì¶ Installing dependencies for ${{ matrix.submodule.name }}"
          
          case "${{ matrix.submodule.tech_stack }}" in
            "python")
              python -m pip install --upgrade pip
              if [ -f "pyproject.toml" ]; then
                pip install -e ".[dev,test]" || pip install -e ".[test]" || pip install -e "."
              elif [ -f "requirements.txt" ]; then
                pip install -r requirements.txt
              elif [ -f "setup.py" ]; then
                pip install -e .
              fi
              ;;
            "nodejs")
              npm install --no-package-lock
              ;;
            "go")
              go mod tidy
              ;;
            "rust")
              cargo build
              ;;
          esac

      - name: Run linting/formatting checks
        working-directory: ${{ matrix.submodule.path }}
        run: |
          echo "üßπ Running linting for ${{ matrix.submodule.name }}"
          
          case "${{ matrix.submodule.tech_stack }}" in
            "python")
              # Try ruff first, then flake8, then skip
              if command -v ruff &> /dev/null; then
                ruff check . || echo "Ruff linting issues found"
              elif command -v flake8 &> /dev/null; then
                flake8 . || echo "Flake8 linting issues found"
              else
                echo "No Python linter available, skipping"
              fi
              
              # Try black formatting
              if command -v black &> /dev/null; then
                black --check . || echo "Black formatting issues found"
              fi
              ;;
            "nodejs")
              if [ -f "package.json" ] && grep -q '"lint"' package.json; then
                npm run lint || echo "ESLint issues found"
              fi
              ;;
            "go")
              go fmt ./... || echo "Go formatting issues found"
              go vet ./... || echo "Go vet issues found"
              ;;
            "rust")
              cargo fmt --check || echo "Rust formatting issues found"
              cargo clippy || echo "Clippy issues found"
              ;;
          esac
        continue-on-error: true

      - name: Run tests
        working-directory: ${{ matrix.submodule.path }}
        run: |
          echo "üß™ Running tests for ${{ matrix.submodule.name }}"
          ${{ matrix.submodule.test_command }}

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ matrix.submodule.path }}
          format: 'sarif'
          output: 'trivy-${{ matrix.submodule.name }}.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.submodule.name }}.sarif'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Container build test (if Dockerfile exists)
        if: matrix.submodule.dockerfile != ''
        working-directory: ${{ matrix.submodule.path }}
        run: |
          echo "üê≥ Building container for ${{ matrix.submodule.name }}"
          docker build -t ${{ matrix.submodule.name }}-test:latest .

      - name: Container security scan (if built)
        if: matrix.submodule.dockerfile != ''
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ matrix.submodule.name }}-test:latest'
          format: 'sarif'
          output: 'container-${{ matrix.submodule.name }}.sarif'

      - name: Upload container scan results
        if: matrix.submodule.dockerfile != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'container-${{ matrix.submodule.name }}.sarif'
          token: ${{ secrets.GITHUB_TOKEN }}

  submodule-summary:
    name: Submodule Test Summary
    runs-on: ubuntu-latest
    needs: [detect-submodules, test-submodules]
    if: always() && needs.detect-submodules.outputs.has-submodules == 'true'
    
    steps:
      - name: Display summary
        run: |
          echo "## üß™ Submodule Test Results Summary"
          echo "Test Results: ${{ needs.test-submodules.result }}"
          
          if [[ "${{ needs.test-submodules.result }}" == "failure" ]]; then
            echo "‚ùå Some submodule tests failed"
            exit 1
          fi
          
          echo "‚úÖ All submodule tests passed successfully!"