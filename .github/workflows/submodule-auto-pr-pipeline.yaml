name: Submodule Auto-PR Pipeline

on:
  push:
    branches: [ dev, main ]
    paths:
      - 'src/gengines/**'
  pull_request:
    branches: [ dev, main ]
    paths:
      - 'src/gengines/**'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  actions: read
  security-events: write

jobs:
  detect-submodule-changes:
    name: Detect Submodule Changes
    runs-on: ubuntu-latest
    outputs:
      changed-submodules: ${{ steps.detect.outputs.changed-submodules }}
      has-changes: ${{ steps.detect.outputs.has-changes }}
      is-workflow-pr: ${{ steps.detect.outputs.is-workflow-pr }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
        continue-on-error: true

      - name: Check if this is a workflow-focused PR
        id: workflow-check
        run: |
          echo "🔍 Checking if this is a workflow-focused PR..."
          
          # Initialize security validation
          PR_TITLE="${{ github.event.pull_request.title }}"
          IS_WORKFLOW_PR="false"
          TITLE_SUGGESTS_WORKFLOW="false"
          HAS_WORKFLOW_CHANGES="false"
          
          # Security logging
          echo "🔐 Security validation - PR: $PR_TITLE"
          echo "🔐 Security validation - Actor: ${{ github.actor }}"
          echo "🔐 Security validation - Event: ${{ github.event_name }}"
          
          # Check PR title for workflow-related keywords (less permissive)
          if [[ "$PR_TITLE" =~ ^(GitOps|Workflow|CI/CD|Pipeline|Automation|Action): ]]; then
            echo "📝 PR title suggests workflow changes: $PR_TITLE"
            TITLE_SUGGESTS_WORKFLOW="true"
          fi
          
          # Check if workflow files are actually changed
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} || echo "")
            
            if [ -n "$CHANGED_FILES" ]; then
              TOTAL_CHANGES=$(echo "$CHANGED_FILES" | wc -l)
              WORKFLOW_CHANGES=$(echo "$CHANGED_FILES" | grep -c "^\.github/workflows/" || echo "0")
              
              echo "📊 File changes: $TOTAL_CHANGES total, $WORKFLOW_CHANGES workflow files"
              
              # Require actual workflow file changes
              if [ $WORKFLOW_CHANGES -gt 0 ]; then
                HAS_WORKFLOW_CHANGES="true"
                WORKFLOW_PERCENTAGE=$((WORKFLOW_CHANGES * 100 / TOTAL_CHANGES))
                echo "📊 Workflow file percentage: $WORKFLOW_PERCENTAGE%"
                
                # List changed workflow files for security audit
                echo "📋 Changed workflow files:"
                echo "$CHANGED_FILES" | grep "^\.github/workflows/" | sed 's/^/  - /'
              fi
            else
              echo "❌ Error: Could not determine changed files"
            fi
          fi
          
          # Security decision: Require BOTH title format AND workflow file changes
          if [ "$TITLE_SUGGESTS_WORKFLOW" = "true" ] && [ "$HAS_WORKFLOW_CHANGES" = "true" ]; then
            IS_WORKFLOW_PR="true"
            echo "✅ SECURITY VALIDATION PASSED: Title format and workflow changes confirmed"
          else
            echo "❌ SECURITY VALIDATION FAILED: Missing title format or workflow changes"
            if [ "$TITLE_SUGGESTS_WORKFLOW" = "false" ]; then
              echo "  - Title does not start with workflow keyword followed by colon"
            fi
            if [ "$HAS_WORKFLOW_CHANGES" = "false" ]; then
              echo "  - No workflow files were changed"
            fi
          fi
          
          echo "is-workflow-pr=$IS_WORKFLOW_PR" >> $GITHUB_OUTPUT
          echo "🎯 Is workflow PR: $IS_WORKFLOW_PR"

      - name: Detect changed submodules
        id: detect
        run: |
          echo "🔍 Detecting changed submodules..."
          
          # Pass through workflow PR detection
          echo "is-workflow-pr=${{ steps.workflow-check.outputs.is-workflow-pr }}" >> $GITHUB_OUTPUT
          
          # For workflow PRs, skip intensive submodule change detection
          if [ "${{ steps.workflow-check.outputs.is-workflow-pr }}" == "true" ]; then
            echo "⚙️  Workflow PR detected - skipping intensive submodule change detection"
            echo "changed-submodules=[]" >> $GITHUB_OUTPUT
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "🎯 Skipping submodule auto-PR pipeline for workflow PR"
            exit 0
          fi
          
          # Get changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Find affected submodules
          changed_submodules="[]"
          has_changes="false"
          
          for file in $CHANGED_FILES; do
            if [[ "$file" =~ ^src/gengines/([^/]+)/.* ]]; then
              submodule_name="${BASH_REMATCH[1]}"
              submodule_path="src/gengines/$submodule_name"
              
              if [ -d "$submodule_path" ]; then
                echo "📁 Detected changes in submodule: $submodule_name"
                
                # Detect tech stack
                tech_stack="unknown"
                if [ -f "$submodule_path/pyproject.toml" ] || [ -f "$submodule_path/requirements.txt" ]; then
                  tech_stack="python"
                elif [ -f "$submodule_path/package.json" ]; then
                  tech_stack="nodejs"
                elif [ -f "$submodule_path/go.mod" ]; then
                  tech_stack="go"
                elif [ -f "$submodule_path/Cargo.toml" ]; then
                  tech_stack="rust"
                fi
                
                # Add to JSON array if not already present
                if ! echo "$changed_submodules" | jq -e --arg name "$submodule_name" '.[] | select(.name == $name)' > /dev/null; then
                  submodule_info=$(jq -n \
                    --arg name "$submodule_name" \
                    --arg path "$submodule_path" \
                    --arg tech "$tech_stack" \
                    '{name: $name, path: $path, tech_stack: $tech}')
                  
                  changed_submodules=$(echo "$changed_submodules" | jq ". + [$submodule_info]")
                  has_changes="true"
                fi
              fi
            fi
          done
          
          echo "changed-submodules=$changed_submodules" >> $GITHUB_OUTPUT
          echo "has-changes=$has_changes" >> $GITHUB_OUTPUT
          
          echo "🎯 Detected changed submodules:"
          echo "$changed_submodules" | jq '.'

  submodule-comprehensive-test:
    name: Test Submodule
    runs-on: ubuntu-latest
    needs: detect-submodule-changes
    if: needs.detect-submodule-changes.outputs.has-changes == 'true'
    strategy:
      matrix:
        submodule: ${{ fromJson(needs.detect-submodule-changes.outputs.changed-submodules) }}
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
        continue-on-error: true

      - name: Run comprehensive tests for ${{ matrix.submodule.name }}
        working-directory: ${{ matrix.submodule.path }}
        run: |
          echo "🚀 Running comprehensive tests for ${{ matrix.submodule.name }} (${{ matrix.submodule.tech_stack }})"
          
          case "${{ matrix.submodule.tech_stack }}" in
            "python")
              # Setup Python environment
              sudo apt-get update && sudo apt-get install -y python3 python3-pip
              python3 -m pip install --upgrade pip
              
              if [ -f "pyproject.toml" ]; then
                pip install -e ".[test,dev]" || pip install -e ".[test]" || pip install -e "."
              elif [ -f "requirements.txt" ]; then
                pip install -r requirements.txt
              fi
              
              # Install security tools
              pip install bandit safety
              
              # Unit tests
              echo "🧪 Running unit tests..."
              python -m pytest --tb=short --cov=. --cov-report=xml || echo "Unit tests failed"
              
              # Security scan
              echo "🔐 Running security scan..."
              bandit -r . -f json -o bandit-results.json || echo "Security issues found"
              safety check --json --output safety-results.json || echo "Dependency vulnerabilities found"
              
              # Code quality
              echo "🧹 Running code quality checks..."
              if command -v ruff &> /dev/null; then
                ruff check . || echo "Ruff linting issues found"
              elif command -v flake8 &> /dev/null; then
                flake8 . || echo "Flake8 linting issues found"
              fi
              
              if command -v black &> /dev/null; then
                black --check . || echo "Black formatting issues found"
              fi
              ;;
              
            "nodejs")
              # Setup Node.js environment
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
              
              npm install --no-package-lock
              
              # Unit tests
              echo "🧪 Running unit tests..."
              npm test || echo "Unit tests failed"
              
              # Security scan
              echo "🔐 Running security scan..."
              npm audit --json > npm-audit-results.json || echo "Security vulnerabilities found"
              
              # Code quality
              echo "🧹 Running code quality checks..."
              if [ -f "package.json" ] && grep -q '"lint"' package.json; then
                npm run lint || echo "ESLint issues found"
              fi
              ;;
              
            "go")
              # Setup Go environment
              sudo apt-get update && sudo apt-get install -y golang-go
              export GOPATH=$HOME/go
              export PATH=$PATH:$GOPATH/bin
              
              go mod tidy
              
              # Unit tests
              echo "🧪 Running unit tests..."
              go test -v -race -coverprofile=coverage.out ./... || echo "Unit tests failed"
              
              # Code quality
              echo "🧹 Running code quality checks..."
              go fmt ./... || echo "Go formatting issues found"
              go vet ./... || echo "Go vet issues found"
              ;;
              
            "rust")
              # Setup Rust environment
              curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
              source $HOME/.cargo/env
              
              cargo build
              
              # Unit tests
              echo "🧪 Running unit tests..."
              cargo test || echo "Unit tests failed"
              
              # Code quality
              echo "🧹 Running code quality checks..."
              cargo fmt --check || echo "Rust formatting issues found"
              cargo clippy || echo "Clippy issues found"
              ;;
          esac
          
          echo "✅ Comprehensive testing completed for ${{ matrix.submodule.name }}"

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: ${{ matrix.submodule.path }}
          format: 'sarif'
          output: 'trivy-${{ matrix.submodule.name }}.sarif'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.submodule.name }}.sarif'
          token: ${{ secrets.GITHUB_TOKEN }}

  create-staging-pr:
    name: Create Staging PR
    runs-on: ubuntu-latest
    needs: [detect-submodule-changes, submodule-comprehensive-test]
    if: |
      always() &&
      needs.detect-submodule-changes.outputs.has-changes == 'true' &&
      needs.submodule-comprehensive-test.result == 'success' &&
      github.ref == 'refs/heads/dev'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Create staging deployment PR
        run: |
          echo "🚀 Creating staging deployment PR for submodule changes..."
          
          # Create staging branch if it doesn't exist
          if ! git ls-remote --heads origin staging; then
            git checkout -b staging
            git push -u origin staging
          else
            git checkout staging
            git pull origin staging
          fi
          
          # Merge dev changes
          git merge dev --no-ff -m "🚀 Deploy submodule changes to staging

          Changes detected in submodules:
          $(echo '${{ needs.detect-submodule-changes.outputs.changed-submodules }}' | jq -r '.[] | "- " + .name + " (" + .tech_stack + ")"')
          
          ✅ All tests passed successfully
          🔐 Security scans completed
          🧹 Code quality checks passed
          
          Auto-generated by GitHub Actions"
          
          # Push to staging
          git push origin staging
          
          echo "✅ Staging deployment completed"

  create-production-pr:
    name: Create Production PR
    runs-on: ubuntu-latest
    needs: [detect-submodule-changes, submodule-comprehensive-test]
    if: |
      always() &&
      needs.detect-submodule-changes.outputs.has-changes == 'true' &&
      needs.submodule-comprehensive-test.result == 'success' &&
      github.ref == 'refs/heads/dev'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for staging deployment
        run: |
          echo "⏳ Waiting for staging deployment to complete..."
          sleep 60  # Wait 1 minute for staging to deploy and validate

      - name: Create production PR
        run: |
          echo "🚀 Creating production PR for submodule changes..."
          
          # Create PR from dev to main
          gh pr create \
            --title "🚀 Deploy submodule changes to production" \
            --body "$(cat <<EOF
          ## 🚀 Production Deployment
          
          This PR deploys tested submodule changes to production.
          
          ### Changed Submodules:
          $(echo '${{ needs.detect-submodule-changes.outputs.changed-submodules }}' | jq -r '.[] | "- **" + .name + "** (" + .tech_stack + ")"')
          
          ### ✅ Quality Gates Passed:
          - [x] Unit tests passed
          - [x] Security scans completed
          - [x] Code quality checks passed
          - [x] Staging deployment successful
          
          ### 🔄 Deployment Flow:
          1. **Feature Branch** → **Dev Branch** ✅
          2. **Dev Branch** → **Staging Cluster** ✅
          3. **Dev Branch** → **Main Branch** ← *This PR*
          4. **Main Branch** → **Production Cluster** ← *Next step*
          
          ---
          🤖 Auto-generated by GitHub Actions
          EOF
          )" \
            --head dev \
            --base main \
            --assignee "${{ github.actor }}" \
            --label "auto-deploy,production,submodule"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Auto-merge production PR if all checks pass
        run: |
          echo "🔍 Checking if production PR can be auto-merged..."
          
          # Get the PR number
          PR_NUMBER=$(gh pr list --head dev --base main --json number --jq '.[0].number')
          
          if [ -n "$PR_NUMBER" ]; then
            echo "📋 Found PR #$PR_NUMBER"
            
            # Wait for checks to complete
            echo "⏳ Waiting for CI checks to complete..."
            sleep 30
            
            # Check if all checks passed
            if gh pr checks "$PR_NUMBER" --watch; then
              echo "✅ All checks passed, auto-merging PR..."
              gh pr merge "$PR_NUMBER" --auto --squash --delete-branch
              echo "🎉 Production PR auto-merged successfully!"
            else
              echo "❌ Some checks failed, manual review required"
            fi
          else
            echo "❌ No PR found to auto-merge"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [detect-submodule-changes, submodule-comprehensive-test, create-staging-pr, create-production-pr]
    if: always() && needs.detect-submodule-changes.outputs.has-changes == 'true'
    
    steps:
      - name: Deployment summary
        run: |
          echo "## 🚀 Submodule Deployment Summary"
          echo "**Changed Submodules:**"
          echo '${{ needs.detect-submodule-changes.outputs.changed-submodules }}' | jq -r '.[] | "- " + .name + " (" + .tech_stack + ")"'
          echo ""
          echo "**Pipeline Status:**"
          echo "- Tests: ${{ needs.submodule-comprehensive-test.result }}"
          echo "- Staging PR: ${{ needs.create-staging-pr.result }}"
          echo "- Production PR: ${{ needs.create-production-pr.result }}"
          echo ""
          echo "**Next Steps:**"
          echo "1. ✅ Changes deployed to staging cluster via FluxCD"
          echo "2. ✅ Production PR created and auto-merged"
          echo "3. 🔄 Changes will deploy to production cluster via FluxCD"
          echo ""
          echo "🎯 Complete GitOps pipeline executed successfully!"