name: Branch Promotion (Dev ‚Üí Main)

on:
  push:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      force_promotion:
        description: 'Force promotion to main branch'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  promote-to-main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check staging deployment status
        id: staging-check
        run: |
          # In a real scenario, you'd check your staging environment health
          # For now, we'll simulate a staging check
          echo "Checking staging environment health..."
          
          # Simulate staging health check (replace with actual health check)
          STAGING_HEALTHY=true
          
          if [ "$STAGING_HEALTHY" = "true" ]; then
            echo "staging_healthy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Staging environment is healthy"
          else
            echo "staging_healthy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Staging environment is unhealthy"
          fi

      - name: Check if promotion PR exists
        id: pr-check
        run: |
          EXISTING_PR=$(gh pr list --head dev --base main --json number --jq '.[0].number // empty')
          if [ -n "$EXISTING_PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "Promotion PR #$EXISTING_PR already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No existing promotion PR found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changes summary
        id: changes
        run: |
          # Get commit messages since last main merge
          COMMITS=$(git log --oneline origin/main..origin/dev --pretty=format:"- %s" | head -10)
          
          if [ -z "$COMMITS" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No new changes to promote"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Store commits in a file to avoid shell escaping issues
            echo "$COMMITS" > /tmp/commits.txt
            
            # Count commits
            COMMIT_COUNT=$(git rev-list --count origin/main..origin/dev)
            echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
            
            echo "Found $COMMIT_COUNT new commits to promote"
          fi

      - name: Create promotion PR
        if: steps.changes.outputs.has_changes == 'true' && steps.pr-check.outputs.exists == 'false' && (steps.staging-check.outputs.staging_healthy == 'true' || github.event.inputs.force_promotion == 'true')
        run: |
          # Read recent changes from file
          RECENT_CHANGES=$(cat /tmp/commits.txt)
          
          gh pr create \
            --title "üöÄ Promote to Production (${{ steps.changes.outputs.commit_count }} commits)" \
            --body "## Branch Promotion: Dev ‚Üí Main

          **Environment:** Production
          **Commits:** ${{ steps.changes.outputs.commit_count }}
          **Staging Status:** ${{ steps.staging-check.outputs.staging_healthy == 'true' && '‚úÖ Healthy' || '‚ùå Unhealthy' }}

          ### Recent Changes
          $RECENT_CHANGES

          ### Pre-Deployment Checklist
          - [x] Staging environment is healthy
          - [x] All required status checks passed
          - [x] Changes have been tested in staging
          - [ ] Manual review and approval required

          ### Deployment Impact
          - **Target:** Production environment (main branch)
          - **Flux Sync:** Changes will be deployed via FluxCD
          - **Rollback:** Available via Git revert if needed

          ### Post-Deployment
          1. Monitor production environment
          2. Verify all services are healthy
          3. Check application metrics
          4. Confirm user-facing features work correctly

          ---
          *This PR was automatically created by the Branch Promotion workflow*" \
            --base main \
            --head dev \
            --label "promotion,production,deployment,infrastructure"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing PR
        if: steps.changes.outputs.has_changes == 'true' && steps.pr-check.outputs.exists == 'true'
        run: |
          gh pr comment ${{ steps.pr-check.outputs.pr_number }} --body "üîÑ **Promotion Update**: New changes available for promotion to production (${{ steps.changes.outputs.commit_count }} total commits)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip promotion - no changes
        if: steps.changes.outputs.has_changes == 'false'
        run: |
          echo "‚ÑπÔ∏è No new changes to promote from dev to main"

      - name: Skip promotion - staging unhealthy
        if: steps.changes.outputs.has_changes == 'true' && steps.staging-check.outputs.staging_healthy == 'false' && github.event.inputs.force_promotion != 'true'
        run: |
          echo "‚ö†Ô∏è Staging environment is unhealthy - skipping promotion"
          echo "Use 'force_promotion' workflow input to override this check"