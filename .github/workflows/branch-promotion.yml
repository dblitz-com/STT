name: Branch Promotion (Dev ‚Üí Main)

on:
  push:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      force_promotion:
        description: 'Force promotion to main branch'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  promote-to-main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check staging deployment status
        id: staging-check
        run: |
          echo "üîç Checking staging environment health..."
          
          # Check if staging GitRepositories are ready
          STAGING_HEALTHY=true
          
          # Check recent workflow runs for staging environment
          echo "Checking recent workflow runs for staging validation..."
          
          # Get the latest flux-validation workflow run for dev branch
          LATEST_VALIDATION=$(gh run list --workflow="Flux Manifest Validation" --branch=dev --limit=1 --json conclusion --jq '.[0].conclusion')
          
          # Get the latest comprehensive-testing workflow run for dev branch
          LATEST_TESTING=$(gh run list --workflow="Comprehensive Testing Pipeline" --branch=dev --limit=1 --json conclusion --jq '.[0].conclusion')
          
          echo "Latest validation status: $LATEST_VALIDATION"
          echo "Latest testing status: $LATEST_TESTING"
          
          # Check if both validation and testing passed
          if [ "$LATEST_VALIDATION" = "success" ] && [ "$LATEST_TESTING" = "success" ]; then
            echo "‚úÖ Staging validation and testing workflows passed"
          else
            echo "‚ùå Staging validation or testing workflows failed"
            STAGING_HEALTHY=false
          fi
          
          # Additional check: Look for any recent failed deployments
          FAILED_RUNS=$(gh run list --workflow="Flux End-to-End Testing" --branch=dev --limit=3 --json conclusion --jq '[.[] | select(.conclusion == "failure")] | length')
          
          if [ "$FAILED_RUNS" -gt 2 ]; then
            echo "‚ö†Ô∏è  Multiple recent e2e test failures detected"
            echo "Consider investigating staging environment issues"
          fi
          
          # Check for any recent infrastructure changes that might affect stability
          RECENT_INFRA_CHANGES=$(git log --oneline --since="1 day ago" --grep="infrastructure" --grep="flux" --grep="k8s" --grep="staging" -i | wc -l)
          
          if [ "$RECENT_INFRA_CHANGES" -gt 0 ]; then
            echo "‚ÑπÔ∏è  Recent infrastructure changes detected ($RECENT_INFRA_CHANGES commits)"
            echo "Extra caution recommended for production promotion"
          fi
          
          # Set output based on health check results
          if [ "$STAGING_HEALTHY" = "true" ]; then
            echo "staging_healthy=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Staging environment is healthy for production promotion"
          else
            echo "staging_healthy=false" >> $GITHUB_OUTPUT
            echo "‚ùå Staging environment is unhealthy - blocking production promotion"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if promotion PR exists
        id: pr-check
        run: |
          EXISTING_PR=$(gh pr list --head dev --base main --json number --jq '.[0].number // empty')
          if [ -n "$EXISTING_PR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "Promotion PR #$EXISTING_PR already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "No existing promotion PR found"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get changes summary and detect change types
        id: changes
        run: |
          # Get commit messages since last main merge
          COMMITS=$(git log --oneline origin/main..origin/dev --pretty=format:"- %s" | head -10)
          
          if [ -z "$COMMITS" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No new changes to promote"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            
            # Store commits in a file to avoid shell escaping issues
            echo "$COMMITS" > /tmp/commits.txt
            
            # Count commits
            COMMIT_COUNT=$(git rev-list --count origin/main..origin/dev)
            echo "commit_count=$COMMIT_COUNT" >> $GITHUB_OUTPUT
            
            echo "Found $COMMIT_COUNT new commits to promote"
            
            # Analyze change types based on file patterns
            echo "üîç Analyzing change types..."
            
            # Get changed files
            CHANGED_FILES=$(git diff --name-only origin/main..origin/dev)
            
            # Initialize change type flags
            HAS_INFRASTRUCTURE=false
            HAS_WORKFLOWS=false
            HAS_GENGINES=false
            HAS_DOCS=false
            HAS_TESTS=false
            HAS_CONFIG=false
            
            # Analyze file patterns
            echo "$CHANGED_FILES" | while read -r file; do
              case "$file" in
                infrastructure/*)
                  echo "üèóÔ∏è  Infrastructure change detected: $file"
                  echo "HAS_INFRASTRUCTURE=true" >> /tmp/change_types.txt
                  ;;
                .github/workflows/*)
                  echo "‚öôÔ∏è  Workflow change detected: $file"
                  echo "HAS_WORKFLOWS=true" >> /tmp/change_types.txt
                  ;;
                src/gengines/*)
                  echo "üîß Gengine change detected: $file"
                  echo "HAS_GENGINES=true" >> /tmp/change_types.txt
                  ;;
                *.md|docs/*)
                  echo "üìö Documentation change detected: $file"
                  echo "HAS_DOCS=true" >> /tmp/change_types.txt
                  ;;
                *test*|*.test.*|test/*)
                  echo "üß™ Test change detected: $file"
                  echo "HAS_TESTS=true" >> /tmp/change_types.txt
                  ;;
                *.yaml|*.yml|*.json|*.toml|*.env|*config*)
                  echo "‚öôÔ∏è  Configuration change detected: $file"
                  echo "HAS_CONFIG=true" >> /tmp/change_types.txt
                  ;;
                *)
                  echo "üìù Code change detected: $file"
                  ;;
              esac
            done
            
            # Process change types
            if [ -f /tmp/change_types.txt ]; then
              sort /tmp/change_types.txt | uniq > /tmp/change_types_unique.txt
              
              # Check for infrastructure changes
              if grep -q "HAS_INFRASTRUCTURE=true" /tmp/change_types_unique.txt; then
                HAS_INFRASTRUCTURE=true
              fi
              
              # Check for workflow changes
              if grep -q "HAS_WORKFLOWS=true" /tmp/change_types_unique.txt; then
                HAS_WORKFLOWS=true
              fi
              
              # Check for gengine changes
              if grep -q "HAS_GENGINES=true" /tmp/change_types_unique.txt; then
                HAS_GENGINES=true
              fi
              
              # Check for documentation changes
              if grep -q "HAS_DOCS=true" /tmp/change_types_unique.txt; then
                HAS_DOCS=true
              fi
              
              # Check for test changes
              if grep -q "HAS_TESTS=true" /tmp/change_types_unique.txt; then
                HAS_TESTS=true
              fi
              
              # Check for configuration changes
              if grep -q "HAS_CONFIG=true" /tmp/change_types_unique.txt; then
                HAS_CONFIG=true
              fi
            fi
            
            # Set output variables
            echo "has_infrastructure=$HAS_INFRASTRUCTURE" >> $GITHUB_OUTPUT
            echo "has_workflows=$HAS_WORKFLOWS" >> $GITHUB_OUTPUT
            echo "has_gengines=$HAS_GENGINES" >> $GITHUB_OUTPUT
            echo "has_docs=$HAS_DOCS" >> $GITHUB_OUTPUT
            echo "has_tests=$HAS_TESTS" >> $GITHUB_OUTPUT
            echo "has_config=$HAS_CONFIG" >> $GITHUB_OUTPUT
            
            # Determine risk level
            RISK_LEVEL="low"
            if [ "$HAS_INFRASTRUCTURE" = "true" ] || [ "$HAS_WORKFLOWS" = "true" ]; then
              RISK_LEVEL="high"
              echo "‚ö†Ô∏è  HIGH RISK: Infrastructure or workflow changes detected"
            elif [ "$HAS_CONFIG" = "true" ]; then
              RISK_LEVEL="medium"
              echo "‚ö†Ô∏è  MEDIUM RISK: Configuration changes detected"
            elif [ "$HAS_GENGINES" = "true" ]; then
              RISK_LEVEL="medium"
              echo "‚ö†Ô∏è  MEDIUM RISK: Gengine changes detected"
            elif [ "$HAS_DOCS" = "true" ] && [ "$HAS_TESTS" = "true" ]; then
              RISK_LEVEL="low"
              echo "‚úÖ LOW RISK: Documentation and test changes only"
            else
              echo "‚úÖ LOW RISK: Standard code changes"
            fi
            
            echo "risk_level=$RISK_LEVEL" >> $GITHUB_OUTPUT
            echo "üéØ Overall risk level: $RISK_LEVEL"
            
            # Create change type summary
            CHANGE_SUMMARY=""
            if [ "$HAS_INFRASTRUCTURE" = "true" ]; then
              CHANGE_SUMMARY="$CHANGE_SUMMARY\n- üèóÔ∏è  Infrastructure changes"
            fi
            if [ "$HAS_WORKFLOWS" = "true" ]; then
              CHANGE_SUMMARY="$CHANGE_SUMMARY\n- ‚öôÔ∏è  Workflow changes"
            fi
            if [ "$HAS_GENGINES" = "true" ]; then
              CHANGE_SUMMARY="$CHANGE_SUMMARY\n- üîß Gengine changes"
            fi
            if [ "$HAS_CONFIG" = "true" ]; then
              CHANGE_SUMMARY="$CHANGE_SUMMARY\n- ‚öôÔ∏è  Configuration changes"
            fi
            if [ "$HAS_DOCS" = "true" ]; then
              CHANGE_SUMMARY="$CHANGE_SUMMARY\n- üìö Documentation changes"
            fi
            if [ "$HAS_TESTS" = "true" ]; then
              CHANGE_SUMMARY="$CHANGE_SUMMARY\n- üß™ Test changes"
            fi
            if [ -z "$CHANGE_SUMMARY" ]; then
              CHANGE_SUMMARY="\n- üìù Code changes"
            fi
            
            echo "change_summary=$CHANGE_SUMMARY" >> $GITHUB_OUTPUT
          fi

      - name: Create promotion PR
        if: steps.changes.outputs.has_changes == 'true' && steps.pr-check.outputs.exists == 'false' && (steps.staging-check.outputs.staging_healthy == 'true' || github.event.inputs.force_promotion == 'true')
        run: |
          # Read recent changes from file
          RECENT_CHANGES=$(cat /tmp/commits.txt)
          
          # Determine PR title based on risk level
          RISK_EMOJI="üöÄ"
          if [ "${{ steps.changes.outputs.risk_level }}" = "high" ]; then
            RISK_EMOJI="‚ö†Ô∏è"
          elif [ "${{ steps.changes.outputs.risk_level }}" = "medium" ]; then
            RISK_EMOJI="üî∂"
          fi
          
          gh pr create \
            --title "$RISK_EMOJI Promote to Production (${{ steps.changes.outputs.commit_count }} commits) - ${{ steps.changes.outputs.risk_level }} risk" \
            --body "## Branch Promotion: Dev ‚Üí Main

          **Environment:** Production
          **Commits:** ${{ steps.changes.outputs.commit_count }}
          **Risk Level:** ${{ steps.changes.outputs.risk_level }}
          **Staging Status:** ${{ steps.staging-check.outputs.staging_healthy == 'true' && '‚úÖ Healthy' || '‚ùå Unhealthy' }}

          ### Change Types
          ${{ steps.changes.outputs.change_summary }}

          ### Recent Changes
          $RECENT_CHANGES

          ### Pre-Deployment Checklist
          - [x] Staging environment is healthy
          - [x] All required status checks passed
          - [x] Changes have been tested in staging
          - [x] Staging workflows (validation, testing) are passing
          - [x] Change type analysis completed
          - [ ] Manual review and approval required

          ### Risk Assessment
          - **Infrastructure Changes:** ${{ steps.changes.outputs.has_infrastructure == 'true' && 'Yes ‚ö†Ô∏è' || 'No ‚úÖ' }}
          - **Workflow Changes:** ${{ steps.changes.outputs.has_workflows == 'true' && 'Yes ‚ö†Ô∏è' || 'No ‚úÖ' }}
          - **Gengine Changes:** ${{ steps.changes.outputs.has_gengines == 'true' && 'Yes üîß' || 'No ‚úÖ' }}
          - **Configuration Changes:** ${{ steps.changes.outputs.has_config == 'true' && 'Yes ‚öôÔ∏è' || 'No ‚úÖ' }}

          ### Deployment Impact
          - **Target:** Production environment (main branch)
          - **Flux Sync:** Changes will be deployed via FluxCD
          - **Rollback:** Available via Git revert if needed
          - **Risk Level:** ${{ steps.changes.outputs.risk_level }}

          ### Post-Deployment
          1. Monitor production environment
          2. Verify all services are healthy
          3. Check application metrics
          4. Confirm user-facing features work correctly

          ---
          *This PR was automatically created by the Branch Promotion workflow*" \
            --base main \
            --head dev \
            --label "promotion,production,deployment,${{ steps.changes.outputs.risk_level }}-risk${{ steps.changes.outputs.has_infrastructure == 'true' && ',infrastructure' || '' }}${{ steps.changes.outputs.has_workflows == 'true' && ',workflows' || '' }}${{ steps.changes.outputs.has_gengines == 'true' && ',gengines' || '' }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure high-risk change requirements
        if: steps.changes.outputs.has_changes == 'true' && steps.pr-check.outputs.exists == 'false' && steps.changes.outputs.risk_level == 'high'
        run: |
          echo "‚ö†Ô∏è  HIGH RISK CHANGES DETECTED - Manual approval required"
          
          # Get the PR number that was just created
          PR_NUMBER=$(gh pr list --head dev --base main --json number --jq '.[0].number')
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Configuring high-risk change requirements for PR #$PR_NUMBER"
            
            # Add high-risk label
            gh pr edit $PR_NUMBER --add-label "high-risk,requires-manual-approval"
            
            # Add a comment explaining the manual approval requirement
            gh pr comment $PR_NUMBER --body "‚ö†Ô∏è  **HIGH RISK CHANGES DETECTED**

            This PR contains high-risk changes that require manual approval before merging:
            
            **Change Types:**
            - Infrastructure changes: ${{ steps.changes.outputs.has_infrastructure == 'true' && 'Yes ‚ö†Ô∏è' || 'No' }}
            - Workflow changes: ${{ steps.changes.outputs.has_workflows == 'true' && 'Yes ‚ö†Ô∏è' || 'No' }}
            
            **Required Actions:**
            1. ‚úÖ Review all changes carefully
            2. ‚úÖ Verify staging environment is stable
            3. ‚úÖ Confirm production readiness
            4. ‚úÖ Manually approve this PR
            
            **‚ö†Ô∏è  AUTO-MERGE IS DISABLED** for this PR due to high-risk changes.
            
            To proceed:
            - Review and approve this PR manually
            - Merge will be available after approval
            
            ---
            *This comment was automatically generated by the Branch Promotion workflow*"
            
            echo "High-risk change requirements configured for PR #$PR_NUMBER"
          else
            echo "Could not find PR to configure high-risk requirements"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Configure medium-risk change requirements
        if: steps.changes.outputs.has_changes == 'true' && steps.pr-check.outputs.exists == 'false' && steps.changes.outputs.risk_level == 'medium'
        run: |
          echo "üî∂ MEDIUM RISK CHANGES DETECTED - Enhanced review recommended"
          
          # Get the PR number that was just created
          PR_NUMBER=$(gh pr list --head dev --base main --json number --jq '.[0].number')
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Configuring medium-risk change requirements for PR #$PR_NUMBER"
            
            # Add medium-risk label
            gh pr edit $PR_NUMBER --add-label "medium-risk,enhanced-review"
            
            # Add a comment explaining the enhanced review
            gh pr comment $PR_NUMBER --body "üî∂ **MEDIUM RISK CHANGES DETECTED**

            This PR contains medium-risk changes that should be reviewed carefully:
            
            **Change Types:**
            - Configuration changes: ${{ steps.changes.outputs.has_config == 'true' && 'Yes ‚öôÔ∏è' || 'No' }}
            - Gengine changes: ${{ steps.changes.outputs.has_gengines == 'true' && 'Yes üîß' || 'No' }}
            
            **Recommended Actions:**
            1. ‚úÖ Review configuration changes
            2. ‚úÖ Verify gengine compatibility
            3. ‚úÖ Monitor deployment closely
            
            **‚ÑπÔ∏è  AUTO-MERGE IS AVAILABLE** but enhanced monitoring is recommended.
            
            ---
            *This comment was automatically generated by the Branch Promotion workflow*"
            
            echo "Medium-risk change requirements configured for PR #$PR_NUMBER"
          else
            echo "Could not find PR to configure medium-risk requirements"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing PR
        if: steps.changes.outputs.has_changes == 'true' && steps.pr-check.outputs.exists == 'true'
        run: |
          # Update the existing PR with new information
          gh pr comment ${{ steps.pr-check.outputs.pr_number }} --body "üîÑ **Promotion Update**: New changes available for promotion to production
          
          **Updated Status:**
          - Total commits: ${{ steps.changes.outputs.commit_count }}
          - Risk level: ${{ steps.changes.outputs.risk_level }}
          - Staging health: ${{ steps.staging-check.outputs.staging_healthy == 'true' && 'Healthy ‚úÖ' || 'Unhealthy ‚ùå' }}
          
          **Change Types:**
          ${{ steps.changes.outputs.change_summary }}
          
          **Risk Assessment:**
          - Infrastructure changes: ${{ steps.changes.outputs.has_infrastructure == 'true' && 'Yes ‚ö†Ô∏è' || 'No ‚úÖ' }}
          - Workflow changes: ${{ steps.changes.outputs.has_workflows == 'true' && 'Yes ‚ö†Ô∏è' || 'No ‚úÖ' }}
          
          Please review the updated changes before proceeding with the promotion."
          
          # Update labels based on new risk level
          if [ "${{ steps.changes.outputs.risk_level }}" = "high" ]; then
            gh pr edit ${{ steps.pr-check.outputs.pr_number }} --add-label "high-risk,requires-manual-approval"
            gh pr edit ${{ steps.pr-check.outputs.pr_number }} --remove-label "medium-risk,low-risk" || true
          elif [ "${{ steps.changes.outputs.risk_level }}" = "medium" ]; then
            gh pr edit ${{ steps.pr-check.outputs.pr_number }} --add-label "medium-risk,enhanced-review"
            gh pr edit ${{ steps.pr-check.outputs.pr_number }} --remove-label "high-risk,low-risk" || true
          else
            gh pr edit ${{ steps.pr-check.outputs.pr_number }} --add-label "low-risk"
            gh pr edit ${{ steps.pr-check.outputs.pr_number }} --remove-label "high-risk,medium-risk" || true
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip promotion - no changes
        if: steps.changes.outputs.has_changes == 'false'
        run: |
          echo "‚ÑπÔ∏è No new changes to promote from dev to main"

      - name: Skip promotion - staging unhealthy
        if: steps.changes.outputs.has_changes == 'true' && steps.staging-check.outputs.staging_healthy == 'false' && github.event.inputs.force_promotion != 'true'
        run: |
          echo "‚ö†Ô∏è Staging environment is unhealthy - skipping promotion"
          echo "Use 'force_promotion' workflow input to override this check"
          echo "Recent staging status:"
          echo "  - Flux validation: $(gh run list --workflow="Flux Manifest Validation" --branch=dev --limit=1 --json conclusion --jq '.[0].conclusion')"
          echo "  - Comprehensive testing: $(gh run list --workflow="Comprehensive Testing Pipeline" --branch=dev --limit=1 --json conclusion --jq '.[0].conclusion')"
          echo "  - E2E testing: $(gh run list --workflow="Flux End-to-End Testing" --branch=dev --limit=1 --json conclusion --jq '.[0].conclusion')"
          echo ""
          echo "To force promotion despite staging issues, manually trigger this workflow with force_promotion=true"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}