name: Push Flux Manifests as OCI Artifacts

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'infrastructure/**'

permissions:
  packages: write # needed for ghcr.io access

env:
  REGISTRY: ghcr.io
  OCI_REPO_BASE: "oci://ghcr.io/dblitz-com/manifests"

jobs:
  push-staging:
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main
        with:
          version: 'latest'
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Push staging manifests
        run: |
          OCI_REPO="${{ env.OCI_REPO_BASE }}/staging"
          
          flux push artifact $OCI_REPO:$(git rev-parse --short HEAD) \
            --path="./infrastructure/clusters/staging" \
            --source="$(git config --get remote.origin.url)" \
            --revision="$(git branch --show-current)@sha1:$(git rev-parse HEAD)" \
            --annotations="environment=staging" \
            --annotations="branch=dev"
            
      - name: Tag as latest staging
        run: |
          OCI_REPO="${{ env.OCI_REPO_BASE }}/staging"
          flux tag artifact $OCI_REPO:$(git rev-parse --short HEAD) --tag latest
          flux tag artifact $OCI_REPO:$(git rev-parse --short HEAD) --tag staging

  push-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main
        with:
          version: 'latest'
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Push production manifests
        run: |
          OCI_REPO="${{ env.OCI_REPO_BASE }}/production"
          
          flux push artifact $OCI_REPO:$(git rev-parse --short HEAD) \
            --path="./infrastructure/clusters/production" \
            --source="$(git config --get remote.origin.url)" \
            --revision="$(git branch --show-current)@sha1:$(git rev-parse HEAD)" \
            --annotations="environment=production" \
            --annotations="branch=main"
            
      - name: Tag as production release
        run: |
          OCI_REPO="${{ env.OCI_REPO_BASE }}/production"
          flux tag artifact $OCI_REPO:$(git rev-parse --short HEAD) --tag latest
          flux tag artifact $OCI_REPO:$(git rev-parse --short HEAD) --tag production
          
          # Create semantic version tag if this is a release
          if [[ "${{ github.event.head_commit.message }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+')
            flux tag artifact $OCI_REPO:$(git rev-parse --short HEAD) --tag $VERSION
          fi