{
  "site_name": "LangGraph",
  "base_url": "https://langchain-ai.github.io/langgraph",
  "total_modules": 15,
  "total_elements": 23429,
  "callable_elements": 18562,
  "modules": [
    {
      "name": "Graph Definitions¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/graphs/",
      "classes": 67,
      "functions": 435,
      "exceptions": 50,
      "attributes": 50,
      "elements": [
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Bases: Generic[StateT, InputT, OutputT]",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Add a new node to the state graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Merges two lists of messages, updating existing messages by ID.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Bases: Generic[StateT, InputT, OutputT]",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "StateGraph",
          "type": "class",
          "full_name": "StateGraph",
          "mcp_tool_name": "stategraph",
          "signature": "StateGraph",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Bases: Generic[StateT, InputT, OutputT]",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Add a new node to the state graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Add a new node to the state graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "add_node",
          "type": "class",
          "full_name": "add_node",
          "mcp_tool_name": "add_node",
          "signature": "add_node",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Add a new node to the state graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "add_edge",
          "type": "class",
          "full_name": "add_edge",
          "mcp_tool_name": "add_edge",
          "signature": "add_edge",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "add_conditional_edges",
          "type": "class",
          "full_name": "add_conditional_edges",
          "mcp_tool_name": "add_conditional_edges",
          "signature": "add_conditional_edges",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "add_sequence",
          "type": "class",
          "full_name": "add_sequence",
          "mcp_tool_name": "add_sequence",
          "signature": "add_sequence",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "compile",
          "type": "class",
          "full_name": "compile",
          "mcp_tool_name": "compile",
          "signature": "compile",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "CompiledStateGraph",
          "type": "class",
          "full_name": "CompiledStateGraph",
          "mcp_tool_name": "compiledstategraph",
          "signature": "CompiledStateGraph",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "stream",
          "type": "class",
          "full_name": "stream",
          "mcp_tool_name": "stream",
          "signature": "stream",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "astream",
          "type": "class",
          "full_name": "astream",
          "mcp_tool_name": "astream",
          "signature": "astream",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "invoke",
          "type": "class",
          "full_name": "invoke",
          "mcp_tool_name": "invoke",
          "signature": "invoke",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "ainvoke",
          "type": "class",
          "full_name": "ainvoke",
          "mcp_tool_name": "ainvoke",
          "signature": "ainvoke",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_state",
          "type": "class",
          "full_name": "get_state",
          "mcp_tool_name": "get_state",
          "signature": "get_state",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "Types¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/types/",
      "classes": 91,
      "functions": 102,
      "exceptions": 58,
      "attributes": 85,
      "elements": [
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OverallState",
          "type": "class",
          "full_name": "OverallState",
          "mcp_tool_name": "overallstate",
          "signature": "OverallState",
          "description": "A message or packet to send to a specific node in the graph.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "Functional",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/func/",
      "classes": 14,
      "functions": 108,
      "exceptions": 14,
      "attributes": 14,
      "elements": [
        {
          "name": "entrypoint",
          "type": "class",
          "full_name": "entrypoint",
          "mcp_tool_name": "entrypoint",
          "signature": "entrypoint",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "final",
          "type": "class",
          "full_name": "final",
          "mcp_tool_name": "final",
          "signature": "final",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "value",
          "type": "class",
          "full_name": "value",
          "mcp_tool_name": "value",
          "signature": "value",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "save",
          "type": "class",
          "full_name": "save",
          "mcp_tool_name": "save",
          "signature": "save",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__init__",
          "type": "class",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__call__",
          "type": "class",
          "full_name": "__call__",
          "mcp_tool_name": "__call__",
          "signature": "__call__",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "task",
          "type": "class",
          "full_name": "task",
          "mcp_tool_name": "task",
          "signature": "task",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "entrypoint",
          "type": "class",
          "full_name": "entrypoint",
          "mcp_tool_name": "entrypoint",
          "signature": "entrypoint",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "final",
          "type": "class",
          "full_name": "final",
          "mcp_tool_name": "final",
          "signature": "final",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "value",
          "type": "class",
          "full_name": "value",
          "mcp_tool_name": "value",
          "signature": "value",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "save",
          "type": "class",
          "full_name": "save",
          "mcp_tool_name": "save",
          "signature": "save",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__init__",
          "type": "class",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__call__",
          "type": "class",
          "full_name": "__call__",
          "mcp_tool_name": "__call__",
          "signature": "__call__",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "task",
          "type": "class",
          "full_name": "task",
          "mcp_tool_name": "task",
          "signature": "task",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "signature",
          "type": "function",
          "full_name": "signature",
          "mcp_tool_name": "signature",
          "signature": "signature()",
          "description": "Define a LangGraph workflow using the entrypoint decorator.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "signature",
          "type": "function",
          "full_name": "signature",
          "mcp_tool_name": "signature",
          "signature": "signature()",
          "description": "The decorated function must accept a single parameter, which serves as the input\nto the function. This input parameter can be of any type. Use a dictionary\nto pass multiple parameters to the function.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "signature",
          "type": "function",
          "full_name": "signature",
          "mcp_tool_name": "signature",
          "signature": "signature()",
          "description": "The decorated function must accept a single parameter, which serves as the input\nto the function. This input parameter can be of any type. Use a dictionary\nto pass multiple parameters to the function.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "signature",
          "type": "function",
          "full_name": "signature",
          "mcp_tool_name": "signature",
          "signature": "signature()",
          "description": "The decorated function must accept a single parameter, which serves as the input\nto the function. This input parameter can be of any type. Use a dictionary\nto pass multiple parameters to the function.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "entrypoint",
          "type": "function",
          "full_name": "entrypoint",
          "mcp_tool_name": "entrypoint",
          "signature": "entrypoint(checkpointer = MemorySaver()",
          "description": "Bases: Generic[R, S]",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint"
          ]
        },
        {
          "name": "__init__",
          "type": "function",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__(checkpointer: BaseCheckpointSaver | None = None, store: BaseStore | None = None, cache: BaseCache | None = None, config_schema: type[Any] | None = None, cache_policy: CachePolicy | None = None, retry_policy: (\n        RetryPolicy | Sequence[RetryPolicy] | None)",
          "description": "Initialize the entrypoint decorator.",
          "parameters": 6,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "Pregel¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/pregel/",
      "classes": 62,
      "functions": 355,
      "exceptions": 55,
      "attributes": 55,
      "elements": [
        {
          "name": "channels",
          "type": "class",
          "full_name": "channels",
          "mcp_tool_name": "channels",
          "signature": "channels",
          "description": "Bases: PregelProtocol[StateT, InputT, OutputT], Generic[StateT, InputT, OutputT]",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channels",
          "type": "class",
          "full_name": "channels",
          "mcp_tool_name": "channels",
          "signature": "channels",
          "description": "Pregel combines actors\nand channels into a single application.\nActors read data from channels and write data to channels.\nPregel organizes the execution of the application into multiple steps,\nfollowing the Pregel Algorithm/Bulk Synchronous Parallel model.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channels",
          "type": "class",
          "full_name": "channels",
          "mcp_tool_name": "channels",
          "signature": "channels",
          "description": "Pregel combines actors\nand channels into a single application.\nActors read data from channels and write data to channels.\nPregel organizes the execution of the application into multiple steps,\nfollowing the Pregel Algorithm/Bulk Synchronous Parallel model.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channels",
          "type": "class",
          "full_name": "channels",
          "mcp_tool_name": "channels",
          "signature": "channels",
          "description": "Pregel combines actors\nand channels into a single application.\nActors read data from channels and write data to channels.\nPregel organizes the execution of the application into multiple steps,\nfollowing the Pregel Algorithm/Bulk Synchronous Parallel model.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channels",
          "type": "class",
          "full_name": "channels",
          "mcp_tool_name": "channels",
          "signature": "channels",
          "description": "Pregel combines actors\nand channels into a single application.\nActors read data from channels and write data to channels.\nPregel organizes the execution of the application into multiple steps,\nfollowing the Pregel Algorithm/Bulk Synchronous Parallel model.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channels",
          "type": "class",
          "full_name": "channels",
          "mcp_tool_name": "channels",
          "signature": "channels",
          "description": "Pregel combines actors\nand channels into a single application.\nActors read data from channels and write data to channels.\nPregel organizes the execution of the application into multiple steps,\nfollowing the Pregel Algorithm/Bulk Synchronous Parallel model.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channels",
          "type": "class",
          "full_name": "channels",
          "mcp_tool_name": "channels",
          "signature": "channels",
          "description": "Pregel combines actors\nand channels into a single application.\nActors read data from channels and write data to channels.\nPregel organizes the execution of the application into multiple steps,\nfollowing the Pregel Algorithm/Bulk Synchronous Parallel model.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "NodeBuilder",
          "type": "class",
          "full_name": "NodeBuilder",
          "mcp_tool_name": "nodebuilder",
          "signature": "NodeBuilder",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "subscribe_only",
          "type": "class",
          "full_name": "subscribe_only",
          "mcp_tool_name": "subscribe_only",
          "signature": "subscribe_only",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "subscribe_to",
          "type": "class",
          "full_name": "subscribe_to",
          "mcp_tool_name": "subscribe_to",
          "signature": "subscribe_to",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "read_from",
          "type": "class",
          "full_name": "read_from",
          "mcp_tool_name": "read_from",
          "signature": "read_from",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "do",
          "type": "class",
          "full_name": "do",
          "mcp_tool_name": "do",
          "signature": "do",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "write_to",
          "type": "class",
          "full_name": "write_to",
          "mcp_tool_name": "write_to",
          "signature": "write_to",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "meta",
          "type": "class",
          "full_name": "meta",
          "mcp_tool_name": "meta",
          "signature": "meta",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "build",
          "type": "class",
          "full_name": "build",
          "mcp_tool_name": "build",
          "signature": "build",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channels",
          "type": "class",
          "full_name": "channels",
          "mcp_tool_name": "channels",
          "signature": "channels",
          "description": "Bases: PregelProtocol[StateT, InputT, OutputT], Generic[StateT, InputT, OutputT]",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Pregel",
          "type": "class",
          "full_name": "Pregel",
          "mcp_tool_name": "pregel",
          "signature": "Pregel",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channels",
          "type": "class",
          "full_name": "channels",
          "mcp_tool_name": "channels",
          "signature": "channels",
          "description": "Pregel combines actors\nand channels into a single application.\nActors read data from channels and write data to channels.\nPregel organizes the execution of the application into multiple steps,\nfollowing the Pregel Algorithm/Bulk Synchronous Parallel model.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "stream",
          "type": "class",
          "full_name": "stream",
          "mcp_tool_name": "stream",
          "signature": "stream",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "astream",
          "type": "class",
          "full_name": "astream",
          "mcp_tool_name": "astream",
          "signature": "astream",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "Checkpointers¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/checkpoints/",
      "classes": 234,
      "functions": 1151,
      "exceptions": 234,
      "attributes": 234,
      "elements": [
        {
          "name": "CheckpointMetadata",
          "type": "class",
          "full_name": "CheckpointMetadata",
          "mcp_tool_name": "checkpointmetadata",
          "signature": "CheckpointMetadata",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "source",
          "type": "class",
          "full_name": "source",
          "mcp_tool_name": "source",
          "signature": "source",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "step",
          "type": "class",
          "full_name": "step",
          "mcp_tool_name": "step",
          "signature": "step",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "parents",
          "type": "class",
          "full_name": "parents",
          "mcp_tool_name": "parents",
          "signature": "parents",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Checkpoint",
          "type": "class",
          "full_name": "Checkpoint",
          "mcp_tool_name": "checkpoint",
          "signature": "Checkpoint",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "v",
          "type": "class",
          "full_name": "v",
          "mcp_tool_name": "v",
          "signature": "v",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "id",
          "type": "class",
          "full_name": "id",
          "mcp_tool_name": "id",
          "signature": "id",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "ts",
          "type": "class",
          "full_name": "ts",
          "mcp_tool_name": "ts",
          "signature": "ts",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channel_values",
          "type": "class",
          "full_name": "channel_values",
          "mcp_tool_name": "channel_values",
          "signature": "channel_values",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "channel_versions",
          "type": "class",
          "full_name": "channel_versions",
          "mcp_tool_name": "channel_versions",
          "signature": "channel_versions",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "versions_seen",
          "type": "class",
          "full_name": "versions_seen",
          "mcp_tool_name": "versions_seen",
          "signature": "versions_seen",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "BaseCheckpointSaver",
          "type": "class",
          "full_name": "BaseCheckpointSaver",
          "mcp_tool_name": "basecheckpointsaver",
          "signature": "BaseCheckpointSaver",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "config_specs",
          "type": "class",
          "full_name": "config_specs",
          "mcp_tool_name": "config_specs",
          "signature": "config_specs",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get",
          "type": "class",
          "full_name": "get",
          "mcp_tool_name": "get",
          "signature": "get",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_tuple",
          "type": "class",
          "full_name": "get_tuple",
          "mcp_tool_name": "get_tuple",
          "signature": "get_tuple",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "list",
          "type": "class",
          "full_name": "list",
          "mcp_tool_name": "list",
          "signature": "list",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "put",
          "type": "class",
          "full_name": "put",
          "mcp_tool_name": "put",
          "signature": "put",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "put_writes",
          "type": "class",
          "full_name": "put_writes",
          "mcp_tool_name": "put_writes",
          "signature": "put_writes",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "delete_thread",
          "type": "class",
          "full_name": "delete_thread",
          "mcp_tool_name": "delete_thread",
          "signature": "delete_thread",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aget",
          "type": "class",
          "full_name": "aget",
          "mcp_tool_name": "aget",
          "signature": "aget",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "Caching",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/cache/",
      "classes": 46,
      "functions": 209,
      "exceptions": 46,
      "attributes": 46,
      "elements": [
        {
          "name": "BaseCache",
          "type": "class",
          "full_name": "BaseCache",
          "mcp_tool_name": "basecache",
          "signature": "BaseCache",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__init__",
          "type": "class",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get",
          "type": "class",
          "full_name": "get",
          "mcp_tool_name": "get",
          "signature": "get",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aget",
          "type": "class",
          "full_name": "aget",
          "mcp_tool_name": "aget",
          "signature": "aget",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "set",
          "type": "class",
          "full_name": "set",
          "mcp_tool_name": "set",
          "signature": "set",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aset",
          "type": "class",
          "full_name": "aset",
          "mcp_tool_name": "aset",
          "signature": "aset",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "clear",
          "type": "class",
          "full_name": "clear",
          "mcp_tool_name": "clear",
          "signature": "clear",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aclear",
          "type": "class",
          "full_name": "aclear",
          "mcp_tool_name": "aclear",
          "signature": "aclear",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "InMemoryCache",
          "type": "class",
          "full_name": "InMemoryCache",
          "mcp_tool_name": "inmemorycache",
          "signature": "InMemoryCache",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get",
          "type": "class",
          "full_name": "get",
          "mcp_tool_name": "get",
          "signature": "get",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aget",
          "type": "class",
          "full_name": "aget",
          "mcp_tool_name": "aget",
          "signature": "aget",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "set",
          "type": "class",
          "full_name": "set",
          "mcp_tool_name": "set",
          "signature": "set",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aset",
          "type": "class",
          "full_name": "aset",
          "mcp_tool_name": "aset",
          "signature": "aset",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "clear",
          "type": "class",
          "full_name": "clear",
          "mcp_tool_name": "clear",
          "signature": "clear",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aclear",
          "type": "class",
          "full_name": "aclear",
          "mcp_tool_name": "aclear",
          "signature": "aclear",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "SqliteCache",
          "type": "class",
          "full_name": "SqliteCache",
          "mcp_tool_name": "sqlitecache",
          "signature": "SqliteCache",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__init__",
          "type": "class",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get",
          "type": "class",
          "full_name": "get",
          "mcp_tool_name": "get",
          "signature": "get",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aget",
          "type": "class",
          "full_name": "aget",
          "mcp_tool_name": "aget",
          "signature": "aget",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "set",
          "type": "class",
          "full_name": "set",
          "mcp_tool_name": "set",
          "signature": "set",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "Config",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/config/",
      "classes": 27,
      "functions": 31,
      "exceptions": 4,
      "attributes": 4,
      "elements": [
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph StreamWriter from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Functions:",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Functions:",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "get_store",
          "type": "class",
          "full_name": "get_store",
          "mcp_tool_name": "get_store",
          "signature": "get_store",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph store from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Access LangGraph StreamWriter from inside a graph node or entrypoint task at runtime.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "entrypoint",
            "task"
          ]
        }
      ]
    },
    {
      "name": "Errors¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/errors/",
      "classes": 12,
      "functions": 20,
      "exceptions": 12,
      "attributes": 12,
      "elements": [
        {
          "name": "GraphRecursionError",
          "type": "class",
          "full_name": "GraphRecursionError",
          "mcp_tool_name": "graphrecursionerror",
          "signature": "GraphRecursionError",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "InvalidUpdateError",
          "type": "class",
          "full_name": "InvalidUpdateError",
          "mcp_tool_name": "invalidupdateerror",
          "signature": "InvalidUpdateError",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "GraphInterrupt",
          "type": "class",
          "full_name": "GraphInterrupt",
          "mcp_tool_name": "graphinterrupt",
          "signature": "GraphInterrupt",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "NodeInterrupt",
          "type": "class",
          "full_name": "NodeInterrupt",
          "mcp_tool_name": "nodeinterrupt",
          "signature": "NodeInterrupt",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "EmptyInputError",
          "type": "class",
          "full_name": "EmptyInputError",
          "mcp_tool_name": "emptyinputerror",
          "signature": "EmptyInputError",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "TaskNotFound",
          "type": "class",
          "full_name": "TaskNotFound",
          "mcp_tool_name": "tasknotfound",
          "signature": "TaskNotFound",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "GraphRecursionError",
          "type": "class",
          "full_name": "GraphRecursionError",
          "mcp_tool_name": "graphrecursionerror",
          "signature": "GraphRecursionError",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "InvalidUpdateError",
          "type": "class",
          "full_name": "InvalidUpdateError",
          "mcp_tool_name": "invalidupdateerror",
          "signature": "InvalidUpdateError",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "GraphInterrupt",
          "type": "class",
          "full_name": "GraphInterrupt",
          "mcp_tool_name": "graphinterrupt",
          "signature": "GraphInterrupt",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "NodeInterrupt",
          "type": "class",
          "full_name": "NodeInterrupt",
          "mcp_tool_name": "nodeinterrupt",
          "signature": "NodeInterrupt",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "EmptyInputError",
          "type": "class",
          "full_name": "EmptyInputError",
          "mcp_tool_name": "emptyinputerror",
          "signature": "EmptyInputError",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "TaskNotFound",
          "type": "class",
          "full_name": "TaskNotFound",
          "mcp_tool_name": "tasknotfound",
          "signature": "TaskNotFound",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "compile",
          "type": "function",
          "full_name": "compile",
          "mcp_tool_name": "compile",
          "signature": "compile()",
          "description": "Bases: RecursionError",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "compile",
          "type": "function",
          "full_name": "compile",
          "mcp_tool_name": "compile",
          "signature": "compile()",
          "description": "Classes:",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "compile",
          "type": "function",
          "full_name": "compile",
          "mcp_tool_name": "compile",
          "signature": "compile()",
          "description": "Classes:",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "compile",
          "type": "function",
          "full_name": "compile",
          "mcp_tool_name": "compile",
          "signature": "compile()",
          "description": "Bases: RecursionError",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "compile",
          "type": "function",
          "full_name": "compile",
          "mcp_tool_name": "compile",
          "signature": "compile()",
          "description": "Bases: RecursionError",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "GraphRecursionError",
          "type": "function",
          "full_name": "GraphRecursionError",
          "mcp_tool_name": "graphrecursionerror",
          "signature": "GraphRecursionError()",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "compile",
          "type": "function",
          "full_name": "compile",
          "mcp_tool_name": "compile",
          "signature": "compile()",
          "description": "Bases: RecursionError",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "InvalidUpdateError",
          "type": "function",
          "full_name": "InvalidUpdateError",
          "mcp_tool_name": "invalidupdateerror",
          "signature": "InvalidUpdateError()",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "Constants",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/constants/",
      "classes": 6,
      "functions": 20,
      "exceptions": 6,
      "attributes": 6,
      "elements": [
        {
          "name": "TAG_HIDDEN",
          "type": "class",
          "full_name": "TAG_HIDDEN",
          "mcp_tool_name": "tag_hidden",
          "signature": "TAG_HIDDEN",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "START",
          "type": "class",
          "full_name": "START",
          "mcp_tool_name": "start",
          "signature": "START",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "END",
          "type": "class",
          "full_name": "END",
          "mcp_tool_name": "end",
          "signature": "END",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "TAG_HIDDEN",
          "type": "class",
          "full_name": "TAG_HIDDEN",
          "mcp_tool_name": "tag_hidden",
          "signature": "TAG_HIDDEN",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "START",
          "type": "class",
          "full_name": "START",
          "mcp_tool_name": "start",
          "signature": "START",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "END",
          "type": "class",
          "full_name": "END",
          "mcp_tool_name": "end",
          "signature": "END",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('langsmith: hidden')",
          "description": "Tag to hide a node/edge from certain tracing/streaming environments.",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('langsmith: hidden')",
          "description": null,
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('langsmith: hidden')",
          "description": null,
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('__start__')",
          "description": "The first (maybe virtual) node in graph-style Pregel.",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('__start__')",
          "description": null,
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('__start__')",
          "description": null,
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('__end__')",
          "description": "The last (maybe virtual) node in graph-style Pregel.",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('__end__')",
          "description": null,
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('__end__')",
          "description": null,
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('langsmith: hidden')",
          "description": "Attributes:",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('langsmith: hidden')",
          "description": "Attributes:",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('langsmith: hidden')",
          "description": "Tag to hide a node/edge from certain tracing/streaming environments.",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "intern",
          "type": "function",
          "full_name": "intern",
          "mcp_tool_name": "intern",
          "signature": "intern('langsmith: hidden')",
          "description": "Tag to hide a node/edge from certain tracing/streaming environments.",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "TAG_HIDDEN",
          "type": "function",
          "full_name": "TAG_HIDDEN",
          "mcp_tool_name": "tag_hidden",
          "signature": "TAG_HIDDEN()",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "Channels¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/channels/",
      "classes": 82,
      "functions": 194,
      "exceptions": 82,
      "attributes": 82,
      "elements": [
        {
          "name": "BaseChannel",
          "type": "class",
          "full_name": "BaseChannel",
          "mcp_tool_name": "basechannel",
          "signature": "BaseChannel",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "ValueType",
          "type": "class",
          "full_name": "ValueType",
          "mcp_tool_name": "valuetype",
          "signature": "ValueType",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "UpdateType",
          "type": "class",
          "full_name": "UpdateType",
          "mcp_tool_name": "updatetype",
          "signature": "UpdateType",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "copy",
          "type": "class",
          "full_name": "copy",
          "mcp_tool_name": "copy",
          "signature": "copy",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "checkpoint",
          "type": "class",
          "full_name": "checkpoint",
          "mcp_tool_name": "checkpoint",
          "signature": "checkpoint",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "from_checkpoint",
          "type": "class",
          "full_name": "from_checkpoint",
          "mcp_tool_name": "from_checkpoint",
          "signature": "from_checkpoint",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get",
          "type": "class",
          "full_name": "get",
          "mcp_tool_name": "get",
          "signature": "get",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "is_available",
          "type": "class",
          "full_name": "is_available",
          "mcp_tool_name": "is_available",
          "signature": "is_available",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "update",
          "type": "class",
          "full_name": "update",
          "mcp_tool_name": "update",
          "signature": "update",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "consume",
          "type": "class",
          "full_name": "consume",
          "mcp_tool_name": "consume",
          "signature": "consume",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "finish",
          "type": "class",
          "full_name": "finish",
          "mcp_tool_name": "finish",
          "signature": "finish",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Topic",
          "type": "class",
          "full_name": "Topic",
          "mcp_tool_name": "topic",
          "signature": "Topic",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "ValueType",
          "type": "class",
          "full_name": "ValueType",
          "mcp_tool_name": "valuetype",
          "signature": "ValueType",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "UpdateType",
          "type": "class",
          "full_name": "UpdateType",
          "mcp_tool_name": "updatetype",
          "signature": "UpdateType",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "consume",
          "type": "class",
          "full_name": "consume",
          "mcp_tool_name": "consume",
          "signature": "consume",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "finish",
          "type": "class",
          "full_name": "finish",
          "mcp_tool_name": "finish",
          "signature": "finish",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "copy",
          "type": "class",
          "full_name": "copy",
          "mcp_tool_name": "copy",
          "signature": "copy",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "LastValue",
          "type": "class",
          "full_name": "LastValue",
          "mcp_tool_name": "lastvalue",
          "signature": "LastValue",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "ValueType",
          "type": "class",
          "full_name": "ValueType",
          "mcp_tool_name": "valuetype",
          "signature": "ValueType",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "UpdateType",
          "type": "class",
          "full_name": "UpdateType",
          "mcp_tool_name": "updatetype",
          "signature": "UpdateType",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "Agents¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/agents/",
      "classes": 71,
      "functions": 193,
      "exceptions": 24,
      "attributes": 24,
      "elements": [
        {
          "name": "AgentState",
          "type": "class",
          "full_name": "AgentState",
          "mcp_tool_name": "agentstate",
          "signature": "AgentState",
          "description": "Bases: InjectedToolArg",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        },
        {
          "name": "State",
          "type": "class",
          "full_name": "State",
          "mcp_tool_name": "state",
          "signature": "State",
          "description": "Use in the conditional_edge to route to the ToolNode if the last message",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": [
            "tool"
          ]
        }
      ]
    },
    {
      "name": "LangGraph Supervisor¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/supervisor/",
      "classes": 6,
      "functions": 90,
      "exceptions": 6,
      "attributes": 6,
      "elements": [
        {
          "name": "create_supervisor",
          "type": "class",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_handoff_tool",
          "type": "class",
          "full_name": "create_handoff_tool",
          "mcp_tool_name": "create_handoff_tool",
          "signature": "create_handoff_tool",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_forward_message_tool",
          "type": "class",
          "full_name": "create_forward_message_tool",
          "mcp_tool_name": "create_forward_message_tool",
          "signature": "create_forward_message_tool",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "class",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_handoff_tool",
          "type": "class",
          "full_name": "create_handoff_tool",
          "mcp_tool_name": "create_handoff_tool",
          "signature": "create_handoff_tool",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_forward_message_tool",
          "type": "class",
          "full_name": "create_forward_message_tool",
          "mcp_tool_name": "create_forward_message_tool",
          "signature": "create_forward_message_tool",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": "Create a multi-agent supervisor.",
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_supervisor",
          "type": "function",
          "full_name": "create_supervisor",
          "mcp_tool_name": "create_supervisor",
          "signature": "create_supervisor(agents: list[Pregel], args, model: LanguageModelLike, tools: (\n        list[BaseTool | Callable] | ToolNode | None)",
          "description": null,
          "parameters": 4,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "LangGraph Swarm¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/swarm/",
      "classes": 8,
      "functions": 64,
      "exceptions": 8,
      "attributes": 8,
      "elements": [
        {
          "name": "SwarmState",
          "type": "class",
          "full_name": "SwarmState",
          "mcp_tool_name": "swarmstate",
          "signature": "SwarmState",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "class",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "add_active_agent_router",
          "type": "class",
          "full_name": "add_active_agent_router",
          "mcp_tool_name": "add_active_agent_router",
          "signature": "add_active_agent_router",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_handoff_tool",
          "type": "class",
          "full_name": "create_handoff_tool",
          "mcp_tool_name": "create_handoff_tool",
          "signature": "create_handoff_tool",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "SwarmState",
          "type": "class",
          "full_name": "SwarmState",
          "mcp_tool_name": "swarmstate",
          "signature": "SwarmState",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "class",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "add_active_agent_router",
          "type": "class",
          "full_name": "add_active_agent_router",
          "mcp_tool_name": "add_active_agent_router",
          "signature": "add_active_agent_router",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_handoff_tool",
          "type": "class",
          "full_name": "create_handoff_tool",
          "mcp_tool_name": "create_handoff_tool",
          "signature": "create_handoff_tool",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": "Create a multi-agent swarm.",
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "create_swarm",
          "type": "function",
          "full_name": "create_swarm",
          "mcp_tool_name": "create_swarm",
          "signature": "create_swarm(agents: list[Pregel], args, default_active_agent: str, state_schema: StateSchemaType = SwarmState, config_schema: Type[Any] | None = None) -> StateGraph",
          "description": null,
          "parameters": 5,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "LangChain Model Context Protocol (MCP) Adapters¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/mcp/",
      "classes": 18,
      "functions": 149,
      "exceptions": 18,
      "attributes": 18,
      "elements": [
        {
          "name": "MultiServerMCPClient",
          "type": "class",
          "full_name": "MultiServerMCPClient",
          "mcp_tool_name": "multiservermcpclient",
          "signature": "MultiServerMCPClient",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__init__",
          "type": "class",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "session",
          "type": "class",
          "full_name": "session",
          "mcp_tool_name": "session",
          "signature": "session",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_tools",
          "type": "class",
          "full_name": "get_tools",
          "mcp_tool_name": "get_tools",
          "signature": "get_tools",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_prompt",
          "type": "class",
          "full_name": "get_prompt",
          "mcp_tool_name": "get_prompt",
          "signature": "get_prompt",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_resources",
          "type": "class",
          "full_name": "get_resources",
          "mcp_tool_name": "get_resources",
          "signature": "get_resources",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "load_mcp_tools",
          "type": "class",
          "full_name": "load_mcp_tools",
          "mcp_tool_name": "load_mcp_tools",
          "signature": "load_mcp_tools",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "load_mcp_prompt",
          "type": "class",
          "full_name": "load_mcp_prompt",
          "mcp_tool_name": "load_mcp_prompt",
          "signature": "load_mcp_prompt",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "load_mcp_resources",
          "type": "class",
          "full_name": "load_mcp_resources",
          "mcp_tool_name": "load_mcp_resources",
          "signature": "load_mcp_resources",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "MultiServerMCPClient",
          "type": "class",
          "full_name": "MultiServerMCPClient",
          "mcp_tool_name": "multiservermcpclient",
          "signature": "MultiServerMCPClient",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__init__",
          "type": "class",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "session",
          "type": "class",
          "full_name": "session",
          "mcp_tool_name": "session",
          "signature": "session",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_tools",
          "type": "class",
          "full_name": "get_tools",
          "mcp_tool_name": "get_tools",
          "signature": "get_tools",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_prompt",
          "type": "class",
          "full_name": "get_prompt",
          "mcp_tool_name": "get_prompt",
          "signature": "get_prompt",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_resources",
          "type": "class",
          "full_name": "get_resources",
          "mcp_tool_name": "get_resources",
          "signature": "get_resources",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "load_mcp_tools",
          "type": "class",
          "full_name": "load_mcp_tools",
          "mcp_tool_name": "load_mcp_tools",
          "signature": "load_mcp_tools",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "load_mcp_prompt",
          "type": "class",
          "full_name": "load_mcp_prompt",
          "mcp_tool_name": "load_mcp_prompt",
          "signature": "load_mcp_prompt",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "load_mcp_resources",
          "type": "class",
          "full_name": "load_mcp_resources",
          "mcp_tool_name": "load_mcp_resources",
          "signature": "load_mcp_resources",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__init__",
          "type": "function",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__(connections: dict[str, Connection] | None = None) -> None",
          "description": "Client for connecting to multiple MCP servers and loading LangChain-compatible tools, prompts and resources from them.",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__init__",
          "type": "function",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__(connections: dict[str, Connection] | None = None) -> None",
          "description": "Initialize a MultiServerMCPClient with MCP servers connections.",
          "parameters": 1,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    },
    {
      "name": "RemoteGraph¶",
      "description": "Build reliable, stateful AI systems, without giving up control",
      "source_url": "https://langchain-ai.github.io/langgraph/reference/remote_graph/",
      "classes": 107,
      "functions": 807,
      "exceptions": 94,
      "attributes": 94,
      "elements": [
        {
          "name": "Args",
          "type": "class",
          "full_name": "Args",
          "mcp_tool_name": "args",
          "signature": "Args",
          "description": "Bases: PregelProtocol",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Args",
          "type": "class",
          "full_name": "Args",
          "mcp_tool_name": "args",
          "signature": "Args",
          "description": "Create a BaseTool from a Runnable.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Args",
          "type": "class",
          "full_name": "Args",
          "mcp_tool_name": "args",
          "signature": "Args",
          "description": "Classes:",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Args",
          "type": "class",
          "full_name": "Args",
          "mcp_tool_name": "args",
          "signature": "Args",
          "description": "Classes:",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Args",
          "type": "class",
          "full_name": "Args",
          "mcp_tool_name": "args",
          "signature": "Args",
          "description": "Bases: PregelProtocol",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Args",
          "type": "class",
          "full_name": "Args",
          "mcp_tool_name": "args",
          "signature": "Args",
          "description": "Bases: PregelProtocol",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "RemoteGraph",
          "type": "class",
          "full_name": "RemoteGraph",
          "mcp_tool_name": "remotegraph",
          "signature": "RemoteGraph",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Args",
          "type": "class",
          "full_name": "Args",
          "mcp_tool_name": "args",
          "signature": "Args",
          "description": "Bases: PregelProtocol",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "Args",
          "type": "class",
          "full_name": "Args",
          "mcp_tool_name": "args",
          "signature": "Args",
          "description": "The type of input this Runnable accepts specified as a type annotation.",
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "InputType",
          "type": "class",
          "full_name": "InputType",
          "mcp_tool_name": "inputtype",
          "signature": "InputType",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "OutputType",
          "type": "class",
          "full_name": "OutputType",
          "mcp_tool_name": "outputtype",
          "signature": "OutputType",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "input_schema",
          "type": "class",
          "full_name": "input_schema",
          "mcp_tool_name": "input_schema",
          "signature": "input_schema",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "output_schema",
          "type": "class",
          "full_name": "output_schema",
          "mcp_tool_name": "output_schema",
          "signature": "output_schema",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "config_specs",
          "type": "class",
          "full_name": "config_specs",
          "mcp_tool_name": "config_specs",
          "signature": "config_specs",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "__init__",
          "type": "class",
          "full_name": "__init__",
          "mcp_tool_name": "__init__",
          "signature": "__init__",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_graph",
          "type": "class",
          "full_name": "get_graph",
          "mcp_tool_name": "get_graph",
          "signature": "get_graph",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aget_graph",
          "type": "class",
          "full_name": "aget_graph",
          "mcp_tool_name": "aget_graph",
          "signature": "aget_graph",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_state",
          "type": "class",
          "full_name": "get_state",
          "mcp_tool_name": "get_state",
          "signature": "get_state",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "aget_state",
          "type": "class",
          "full_name": "aget_state",
          "mcp_tool_name": "aget_state",
          "signature": "aget_state",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        },
        {
          "name": "get_state_history",
          "type": "class",
          "full_name": "get_state_history",
          "mcp_tool_name": "get_state_history",
          "signature": "get_state_history",
          "description": null,
          "parameters": 0,
          "is_callable": true,
          "is_async": false,
          "decorators": []
        }
      ]
    }
  ]
}