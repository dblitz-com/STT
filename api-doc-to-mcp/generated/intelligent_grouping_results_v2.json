{
  "mapping_statistics": {
    "total_elements": 300,
    "total_mappings": 807,
    "total_tools": 16,
    "tools_by_category": {
      "graph_construction": [
        {
          "tool_name": "create_graph",
          "element_count": 139
        },
        {
          "tool_name": "add_node",
          "element_count": 83
        },
        {
          "tool_name": "add_edge",
          "element_count": 80
        },
        {
          "tool_name": "compile_graph",
          "element_count": 86
        }
      ],
      "state_management": [
        {
          "tool_name": "get_state",
          "element_count": 55
        },
        {
          "tool_name": "update_state",
          "element_count": 73
        }
      ],
      "execution_control": [
        {
          "tool_name": "invoke_graph",
          "element_count": 3
        },
        {
          "tool_name": "stream_graph",
          "element_count": 18
        }
      ],
      "checkpointing": [
        {
          "tool_name": "save_checkpoint",
          "element_count": 55
        },
        {
          "tool_name": "load_checkpoint",
          "element_count": 40
        }
      ],
      "agent_patterns": [
        {
          "tool_name": "create_react_agent",
          "element_count": 46
        }
      ],
      "tool_integration": [
        {
          "tool_name": "bind_tools",
          "element_count": 14
        }
      ],
      "channels": [
        {
          "tool_name": "create_topic",
          "element_count": 35
        }
      ],
      "configuration": [
        {
          "tool_name": "configure_graph",
          "element_count": 34
        }
      ],
      "functional_api": [
        {
          "tool_name": "create_task",
          "element_count": 24
        }
      ],
      "types_schemas": [
        {
          "tool_name": "validate_schema",
          "element_count": 22
        }
      ]
    },
    "elements_by_role": {
      "primary": 37,
      "example": 413,
      "supporting": 357
    },
    "confidence_distribution": {
      "40-49%": 33,
      "10-19%": 261,
      "20-29%": 243,
      "30-39%": 266,
      "50-59%": 4
    },
    "mapping_reasons_frequency": {
      "Exact function match": 240,
      "Semantic keywords": 372,
      "Module context": 460,
      "Usage patterns": 807,
      "Description similarity": 128,
      "Parameter patterns": 246
    }
  },
  "quality_metrics": {
    "overall_coverage": 2.69,
    "tools_with_mappings": 14,
    "average_elements_per_tool": 50.4375,
    "primary_mapping_ratio": 0.04584882280049566
  },
  "tool_mappings": {
    "create_graph": {
      "tool_definition": {
        "name": "create_graph",
        "description": "Create a new LangGraph state graph with specified state schema",
        "category": "graph_construction",
        "complexity": "moderate",
        "parameter_count": 2
      },
      "element_counts": {
        "primary": 16,
        "supporting": 101,
        "example": 22
      },
      "quality_scores": {
        "coverage": 0.4633333333333333,
        "quality": 0.11510791366906475,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [
          "State",
          "State",
          "State",
          "State",
          "StateGraph"
        ],
        "supporting": [
          "OverallState",
          "OverallState",
          "OverallState"
        ],
        "example": [
          "add_node",
          "add_edge",
          "add_conditional_edges"
        ]
      }
    },
    "add_node": {
      "tool_definition": {
        "name": "add_node",
        "description": "Add a processing node to the graph with specified function",
        "category": "graph_construction",
        "complexity": "simple",
        "parameter_count": 4
      },
      "element_counts": {
        "primary": 1,
        "supporting": 30,
        "example": 52
      },
      "quality_scores": {
        "coverage": 0.27666666666666667,
        "quality": 0.012048192771084338,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [
          "add_node"
        ],
        "supporting": [
          "State",
          "State",
          "State"
        ],
        "example": [
          "State",
          "State",
          "State"
        ]
      }
    },
    "add_edge": {
      "tool_definition": {
        "name": "add_edge",
        "description": "Add edges between nodes to define workflow flow",
        "category": "graph_construction",
        "complexity": "simple",
        "parameter_count": 4
      },
      "element_counts": {
        "primary": 2,
        "supporting": 26,
        "example": 52
      },
      "quality_scores": {
        "coverage": 0.26666666666666666,
        "quality": 0.025,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [
          "add_edge",
          "add_conditional_edges"
        ],
        "supporting": [
          "create_supervisor",
          "create_supervisor",
          "create_supervisor"
        ],
        "example": [
          "State",
          "State",
          "State"
        ]
      }
    },
    "compile_graph": {
      "tool_definition": {
        "name": "compile_graph",
        "description": "Compile graph into executable workflow with optional checkpointing",
        "category": "graph_construction",
        "complexity": "moderate",
        "parameter_count": 4
      },
      "element_counts": {
        "primary": 2,
        "supporting": 38,
        "example": 46
      },
      "quality_scores": {
        "coverage": 0.2866666666666667,
        "quality": 0.023255813953488372,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [
          "compile",
          "CompiledStateGraph"
        ],
        "supporting": [
          "State",
          "State",
          "State"
        ],
        "example": [
          "State",
          "State",
          "State"
        ]
      }
    },
    "get_state": {
      "tool_definition": {
        "name": "get_state",
        "description": "Retrieve current or historical state from a graph execution",
        "category": "state_management",
        "complexity": "simple",
        "parameter_count": 3
      },
      "element_counts": {
        "primary": 0,
        "supporting": 55,
        "example": 0
      },
      "quality_scores": {
        "coverage": 0.18333333333333332,
        "quality": 0.0,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [],
        "supporting": [
          "State",
          "State",
          "State"
        ],
        "example": []
      }
    },
    "update_state": {
      "tool_definition": {
        "name": "update_state",
        "description": "Update graph state with new values or merge changes",
        "category": "state_management",
        "complexity": "moderate",
        "parameter_count": 4
      },
      "element_counts": {
        "primary": 4,
        "supporting": 43,
        "example": 26
      },
      "quality_scores": {
        "coverage": 0.24333333333333335,
        "quality": 0.0547945205479452,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [
          "State",
          "State",
          "State",
          "State"
        ],
        "supporting": [
          "State",
          "State",
          "State"
        ],
        "example": [
          "create_supervisor",
          "create_supervisor",
          "create_supervisor"
        ]
      }
    },
    "invoke_graph": {
      "tool_definition": {
        "name": "invoke_graph",
        "description": "Execute graph synchronously with input and return final result",
        "category": "execution_control",
        "complexity": "complex",
        "parameter_count": 3
      },
      "element_counts": {
        "primary": 0,
        "supporting": 3,
        "example": 0
      },
      "quality_scores": {
        "coverage": 0.01,
        "quality": 0.0,
        "completeness": 0.3
      },
      "sample_elements": {
        "primary": [],
        "supporting": [
          "invoke",
          "ainvoke",
          "v"
        ],
        "example": []
      }
    },
    "stream_graph": {
      "tool_definition": {
        "name": "stream_graph",
        "description": "Execute graph with streaming output for real-time monitoring",
        "category": "execution_control",
        "complexity": "complex",
        "parameter_count": 4
      },
      "element_counts": {
        "primary": 0,
        "supporting": 4,
        "example": 14
      },
      "quality_scores": {
        "coverage": 0.06,
        "quality": 0.0,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [],
        "supporting": [
          "stream",
          "astream",
          "stream"
        ],
        "example": [
          "create_supervisor",
          "create_supervisor",
          "create_supervisor"
        ]
      }
    },
    "save_checkpoint": {
      "tool_definition": {
        "name": "save_checkpoint",
        "description": "Save current graph state as checkpoint for persistence or recovery",
        "category": "checkpointing",
        "complexity": "moderate",
        "parameter_count": 4
      },
      "element_counts": {
        "primary": 5,
        "supporting": 9,
        "example": 41
      },
      "quality_scores": {
        "coverage": 0.18333333333333332,
        "quality": 0.09090909090909091,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [
          "Checkpoint",
          "v",
          "ts",
          "put",
          "put_writes"
        ],
        "supporting": [
          "save",
          "save",
          "EmptyInputError"
        ],
        "example": [
          "CheckpointMetadata",
          "source",
          "step"
        ]
      }
    },
    "load_checkpoint": {
      "tool_definition": {
        "name": "load_checkpoint",
        "description": "Load and restore graph state from saved checkpoint",
        "category": "checkpointing",
        "complexity": "moderate",
        "parameter_count": 3
      },
      "element_counts": {
        "primary": 4,
        "supporting": 21,
        "example": 15
      },
      "quality_scores": {
        "coverage": 0.13333333333333333,
        "quality": 0.1,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [
          "get",
          "get_tuple",
          "list",
          "aget"
        ],
        "supporting": [
          "get_state",
          "Checkpoint",
          "get"
        ],
        "example": [
          "CheckpointMetadata",
          "source",
          "step"
        ]
      }
    },
    "create_react_agent": {
      "tool_definition": {
        "name": "create_react_agent",
        "description": "Create ReAct (Reasoning + Acting) agent with tools and reasoning loop",
        "category": "agent_patterns",
        "complexity": "complex",
        "parameter_count": 4
      },
      "element_counts": {
        "primary": 0,
        "supporting": 0,
        "example": 46
      },
      "quality_scores": {
        "coverage": 0.15333333333333332,
        "quality": 0.0,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [],
        "supporting": [],
        "example": [
          "AgentState",
          "State",
          "State"
        ]
      }
    },
    "bind_tools": {
      "tool_definition": {
        "name": "bind_tools",
        "description": "Bind external tools to model for function calling",
        "category": "tool_integration",
        "complexity": "moderate",
        "parameter_count": 3
      },
      "element_counts": {
        "primary": 0,
        "supporting": 0,
        "example": 14
      },
      "quality_scores": {
        "coverage": 0.04666666666666667,
        "quality": 0.0,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [],
        "supporting": [],
        "example": [
          "create_supervisor",
          "create_supervisor",
          "create_supervisor"
        ]
      }
    },
    "create_topic": {
      "tool_definition": {
        "name": "create_topic",
        "description": "Create communication topic for message passing between nodes",
        "category": "channels",
        "complexity": "simple",
        "parameter_count": 3
      },
      "element_counts": {
        "primary": 1,
        "supporting": 0,
        "example": 34
      },
      "quality_scores": {
        "coverage": 0.11666666666666667,
        "quality": 0.02857142857142857,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [
          "Topic"
        ],
        "supporting": [],
        "example": [
          "BaseChannel",
          "ValueType",
          "UpdateType"
        ]
      }
    },
    "configure_graph": {
      "tool_definition": {
        "name": "configure_graph",
        "description": "Set graph-wide configuration options and runtime parameters",
        "category": "configuration",
        "complexity": "moderate",
        "parameter_count": 4
      },
      "element_counts": {
        "primary": 0,
        "supporting": 17,
        "example": 17
      },
      "quality_scores": {
        "coverage": 0.11333333333333333,
        "quality": 0.0,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [],
        "supporting": [
          "State",
          "State",
          "State"
        ],
        "example": [
          "State",
          "State",
          "get_store"
        ]
      }
    },
    "create_task": {
      "tool_definition": {
        "name": "create_task",
        "description": "Create functional task with @task decorator pattern for modular workflows",
        "category": "functional_api",
        "complexity": "moderate",
        "parameter_count": 3
      },
      "element_counts": {
        "primary": 2,
        "supporting": 8,
        "example": 14
      },
      "quality_scores": {
        "coverage": 0.08,
        "quality": 0.08333333333333333,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [
          "task",
          "task"
        ],
        "supporting": [
          "signature",
          "signature",
          "signature"
        ],
        "example": [
          "entrypoint",
          "final",
          "value"
        ]
      }
    },
    "validate_schema": {
      "tool_definition": {
        "name": "validate_schema",
        "description": "Validate data against Pydantic schemas and type definitions",
        "category": "types_schemas",
        "complexity": "simple",
        "parameter_count": 3
      },
      "element_counts": {
        "primary": 0,
        "supporting": 2,
        "example": 20
      },
      "quality_scores": {
        "coverage": 0.07333333333333333,
        "quality": 0.0,
        "completeness": 1.0
      },
      "sample_elements": {
        "primary": [],
        "supporting": [
          "v",
          "id"
        ],
        "example": [
          "OverallState",
          "OverallState",
          "OverallState"
        ]
      }
    }
  },
  "unmapped_elements_count": 74,
  "summary": {
    "total_tools": 16,
    "tools_with_elements": 14,
    "total_mapped_elements": 807
  }
}